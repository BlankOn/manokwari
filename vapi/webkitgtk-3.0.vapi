/* webkit-1.0.vapi generated by vapigen, do not modify. */

[CCode (lower_case_cprefix = "webkit_")]
namespace WebKit {
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMAttr : WebKit.DOMNode, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMAttr ();
		public bool get_is_id ();
		public unowned string get_name ();
		public unowned WebKit.DOMElement get_owner_element ();
		public bool get_specified ();
		public unowned string get_value ();
		public void set_value (string value) throws GLib.Error;
		public bool is_id { get; }
		public string name { get; }
		public WebKit.DOMElement owner_element { get; }
		public bool specified { get; }
		public string value { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMBarInfo : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMBarInfo ();
		public bool get_visible ();
		public bool visible { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMBlob : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMBlob ();
		public uint64 get_size ();
		public unowned WebKit.DOMBlob slice (int64 start, int64 end, string content_type);
		public unowned WebKit.DOMBlob webkit_slice (int64 start, int64 end, string content_type);
		public uint64 size { get; }
		[NoAccessorMethod]
		public string type { owned get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMCDATASection : WebKit.DOMText, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMCDATASection ();
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMCSSRule : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMCSSRule ();
		[CCode (cname = "webkit_dom_css_rule_get_css_text")]
		public unowned string get_css_text ();
		[CCode (cname = "webkit_dom_css_rule_get_parent_rule")]
		public unowned WebKit.DOMCSSRule get_parent_rule ();
		[CCode (cname = "webkit_dom_css_rule_get_parent_style_sheet")]
		public unowned WebKit.DOMCSSStyleSheet get_parent_style_sheet ();
		[CCode (cname = "webkit_dom_css_rule_set_css_text")]
		public void set_css_text (string value) throws GLib.Error;
		public string css_text { get; set; }
		public WebKit.DOMCSSRule parent_rule { get; }
		public WebKit.DOMCSSStyleSheet parent_style_sheet { get; }
		[NoAccessorMethod]
		public uint type { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMCSSRuleList : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMCSSRuleList ();
		[CCode (cname = "webkit_dom_css_rule_list_get_length")]
		public ulong get_length ();
		[CCode (cname = "webkit_dom_css_rule_list_item")]
		public unowned WebKit.DOMCSSRule item (ulong index);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMCSSStyleDeclaration : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMCSSStyleDeclaration ();
		[CCode (cname = "webkit_dom_css_style_declaration_get_css_text")]
		public unowned string get_css_text ();
		[CCode (cname = "webkit_dom_css_style_declaration_get_length")]
		public ulong get_length ();
		[CCode (cname = "webkit_dom_css_style_declaration_get_parent_rule")]
		public unowned WebKit.DOMCSSRule get_parent_rule ();
		[CCode (cname = "webkit_dom_css_style_declaration_get_property_css_value")]
		public unowned WebKit.DOMCSSValue get_property_css_value (string property_name);
		[CCode (cname = "webkit_dom_css_style_declaration_get_property_priority")]
		public unowned string get_property_priority (string property_name);
		[CCode (cname = "webkit_dom_css_style_declaration_get_property_shorthand")]
		public unowned string get_property_shorthand (string property_name);
		[CCode (cname = "webkit_dom_css_style_declaration_get_property_value")]
		public unowned string get_property_value (string property_name);
		[CCode (cname = "webkit_dom_css_style_declaration_is_property_implicit")]
		public bool is_property_implicit (string property_name);
		[CCode (cname = "webkit_dom_css_style_declaration_item")]
		public unowned string item (ulong index);
		[CCode (cname = "webkit_dom_css_style_declaration_remove_property")]
		public unowned string remove_property (string property_name) throws GLib.Error;
		[CCode (cname = "webkit_dom_css_style_declaration_set_css_text")]
		public void set_css_text (string value) throws GLib.Error;
		[CCode (cname = "webkit_dom_css_style_declaration_set_property")]
		public void set_property (string property_name, string value, string priority) throws GLib.Error;
		public string css_text { get; set; }
		public ulong length { get; }
		public WebKit.DOMCSSRule parent_rule { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMCSSStyleSheet : WebKit.DOMStyleSheet {
		[CCode (has_construct_function = false)]
		protected DOMCSSStyleSheet ();
		[CCode (cname = "webkit_dom_css_style_sheet_add_rule")]
		public long add_rule (string selector, string style, ulong index) throws GLib.Error;
		[CCode (cname = "webkit_dom_css_style_sheet_delete_rule")]
		public void delete_rule (ulong index) throws GLib.Error;
		[CCode (cname = "webkit_dom_css_style_sheet_get_css_rules")]
		public unowned WebKit.DOMCSSRuleList get_css_rules ();
		[CCode (cname = "webkit_dom_css_style_sheet_get_owner_rule")]
		public unowned WebKit.DOMCSSRule get_owner_rule ();
		[CCode (cname = "webkit_dom_css_style_sheet_get_rules")]
		public unowned WebKit.DOMCSSRuleList get_rules ();
		[CCode (cname = "webkit_dom_css_style_sheet_insert_rule")]
		public ulong insert_rule (string rule, ulong index) throws GLib.Error;
		[CCode (cname = "webkit_dom_css_style_sheet_remove_rule")]
		public void remove_rule (ulong index) throws GLib.Error;
		public WebKit.DOMCSSRuleList css_rules { get; }
		public WebKit.DOMCSSRule owner_rule { get; }
		public WebKit.DOMCSSRuleList rules { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMCSSValue : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMCSSValue ();
		[CCode (cname = "webkit_dom_css_value_get_css_text")]
		public unowned string get_css_text ();
		[CCode (cname = "webkit_dom_css_value_get_css_value_type")]
		public ushort get_css_value_type ();
		[CCode (cname = "webkit_dom_css_value_set_css_text")]
		public void set_css_text (string value) throws GLib.Error;
		public string css_text { get; set; }
		public uint css_value_type { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMCharacterData : WebKit.DOMNode, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMCharacterData ();
		public void append_data (string data) throws GLib.Error;
		public void delete_data (ulong offset, ulong length) throws GLib.Error;
		public unowned string get_data ();
		public ulong get_length ();
		public void insert_data (ulong offset, string data) throws GLib.Error;
		public void replace_data (ulong offset, ulong length, string data) throws GLib.Error;
		public void set_data (string value) throws GLib.Error;
		public unowned string substring_data (ulong offset, ulong length) throws GLib.Error;
		public string data { get; set; }
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMComment : WebKit.DOMCharacterData, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMComment ();
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMConsole : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMConsole ();
		public unowned WebKit.DOMMemoryInfo get_memory ();
		public void group_end ();
		public void time (string title);
		public WebKit.DOMMemoryInfo memory { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	[Compact]
	public class DOMCustom {
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	[Compact]
	public class DOMCustomClass {
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMDOMApplicationCache : WebKit.DOMObject, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMDOMApplicationCache ();
		[CCode (cname = "webkit_dom_dom_application_cache_get_status")]
		public ushort get_status ();
		[CCode (cname = "webkit_dom_dom_application_cache_swap_cache")]
		public void swap_cache () throws GLib.Error;
		[CCode (cname = "webkit_dom_dom_application_cache_update")]
		public void update () throws GLib.Error;
		public uint status { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMDOMImplementation : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMDOMImplementation ();
		[CCode (cname = "webkit_dom_dom_implementation_create_css_style_sheet")]
		public unowned WebKit.DOMCSSStyleSheet create_css_style_sheet (string title, string media) throws GLib.Error;
		[CCode (cname = "webkit_dom_dom_implementation_create_document")]
		public unowned WebKit.DOMDocument create_document (string namespace_uri, string qualified_name, WebKit.DOMDocumentType doctype) throws GLib.Error;
		[CCode (cname = "webkit_dom_dom_implementation_create_document_type")]
		public unowned WebKit.DOMDocumentType create_document_type (string qualified_name, string public_id, string system_id) throws GLib.Error;
		[CCode (cname = "webkit_dom_dom_implementation_create_html_document")]
		public unowned WebKit.DOMHTMLDocument create_html_document (string title);
		[CCode (cname = "webkit_dom_dom_implementation_has_feature")]
		public bool has_feature (string feature, string version);
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMDOMMimeType : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMDOMMimeType ();
		[CCode (cname = "webkit_dom_dom_mime_type_get_description")]
		public unowned string get_description ();
		[CCode (cname = "webkit_dom_dom_mime_type_get_enabled_plugin")]
		public unowned WebKit.DOMDOMPlugin get_enabled_plugin ();
		[CCode (cname = "webkit_dom_dom_mime_type_get_suffixes")]
		public unowned string get_suffixes ();
		public string description { get; }
		public WebKit.DOMDOMPlugin enabled_plugin { get; }
		public string suffixes { get; }
		[NoAccessorMethod]
		public string type { owned get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMDOMMimeTypeArray : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMDOMMimeTypeArray ();
		[CCode (cname = "webkit_dom_dom_mime_type_array_get_length")]
		public ulong get_length ();
		[CCode (cname = "webkit_dom_dom_mime_type_array_item")]
		public unowned WebKit.DOMDOMMimeType item (ulong index);
		[CCode (cname = "webkit_dom_dom_mime_type_array_named_item")]
		public unowned WebKit.DOMDOMMimeType named_item (string name);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMDOMPlugin : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMDOMPlugin ();
		[CCode (cname = "webkit_dom_dom_plugin_get_description")]
		public unowned string get_description ();
		[CCode (cname = "webkit_dom_dom_plugin_get_filename")]
		public unowned string get_filename ();
		[CCode (cname = "webkit_dom_dom_plugin_get_length")]
		public ulong get_length ();
		[CCode (cname = "webkit_dom_dom_plugin_get_name")]
		public unowned string get_name ();
		[CCode (cname = "webkit_dom_dom_plugin_item")]
		public unowned WebKit.DOMDOMMimeType item (ulong index);
		[CCode (cname = "webkit_dom_dom_plugin_named_item")]
		public unowned WebKit.DOMDOMMimeType named_item (string name);
		public string description { get; }
		public string filename { get; }
		public ulong length { get; }
		public string name { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMDOMPluginArray : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMDOMPluginArray ();
		[CCode (cname = "webkit_dom_dom_plugin_array_get_length")]
		public ulong get_length ();
		[CCode (cname = "webkit_dom_dom_plugin_array_item")]
		public unowned WebKit.DOMDOMPlugin item (ulong index);
		[CCode (cname = "webkit_dom_dom_plugin_array_named_item")]
		public unowned WebKit.DOMDOMPlugin named_item (string name);
		[CCode (cname = "webkit_dom_dom_plugin_array_refresh")]
		public void refresh (bool reload);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMDOMSelection : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMDOMSelection ();
		[CCode (cname = "webkit_dom_dom_selection_add_range")]
		public void add_range (WebKit.DOMRange range);
		[CCode (cname = "webkit_dom_dom_selection_collapse")]
		public void collapse (WebKit.DOMNode node, long index) throws GLib.Error;
		[CCode (cname = "webkit_dom_dom_selection_collapse_to_end")]
		public void collapse_to_end () throws GLib.Error;
		[CCode (cname = "webkit_dom_dom_selection_collapse_to_start")]
		public void collapse_to_start () throws GLib.Error;
		[CCode (cname = "webkit_dom_dom_selection_contains_node")]
		public bool contains_node (WebKit.DOMNode node, bool allow_partial);
		[CCode (cname = "webkit_dom_dom_selection_delete_from_document")]
		public void delete_from_document ();
		[CCode (cname = "webkit_dom_dom_selection_empty")]
		public void empty ();
		[CCode (cname = "webkit_dom_dom_selection_extend")]
		public void extend (WebKit.DOMNode node, long offset) throws GLib.Error;
		[CCode (cname = "webkit_dom_dom_selection_get_anchor_node")]
		public unowned WebKit.DOMNode get_anchor_node ();
		[CCode (cname = "webkit_dom_dom_selection_get_anchor_offset")]
		public long get_anchor_offset ();
		[CCode (cname = "webkit_dom_dom_selection_get_base_node")]
		public unowned WebKit.DOMNode get_base_node ();
		[CCode (cname = "webkit_dom_dom_selection_get_base_offset")]
		public long get_base_offset ();
		[CCode (cname = "webkit_dom_dom_selection_get_extent_node")]
		public unowned WebKit.DOMNode get_extent_node ();
		[CCode (cname = "webkit_dom_dom_selection_get_extent_offset")]
		public long get_extent_offset ();
		[CCode (cname = "webkit_dom_dom_selection_get_focus_node")]
		public unowned WebKit.DOMNode get_focus_node ();
		[CCode (cname = "webkit_dom_dom_selection_get_focus_offset")]
		public long get_focus_offset ();
		[CCode (cname = "webkit_dom_dom_selection_get_is_collapsed")]
		public bool get_is_collapsed ();
		[CCode (cname = "webkit_dom_dom_selection_get_range_at")]
		public unowned WebKit.DOMRange get_range_at (long index) throws GLib.Error;
		[CCode (cname = "webkit_dom_dom_selection_get_range_count")]
		public long get_range_count ();
		[CCode (cname = "webkit_dom_dom_selection_modify")]
		public void modify (string alter, string direction, string granularity);
		[CCode (cname = "webkit_dom_dom_selection_remove_all_ranges")]
		public void remove_all_ranges ();
		[CCode (cname = "webkit_dom_dom_selection_select_all_children")]
		public void select_all_children (WebKit.DOMNode node) throws GLib.Error;
		[CCode (cname = "webkit_dom_dom_selection_set_base_and_extent")]
		public void set_base_and_extent (WebKit.DOMNode base_node, long base_offset, WebKit.DOMNode extent_node, long extent_offset) throws GLib.Error;
		[CCode (cname = "webkit_dom_dom_selection_set_position")]
		public void set_position (WebKit.DOMNode node, long offset) throws GLib.Error;
		public WebKit.DOMNode anchor_node { get; }
		public long anchor_offset { get; }
		public WebKit.DOMNode base_node { get; }
		public long base_offset { get; }
		public WebKit.DOMNode extent_node { get; }
		public long extent_offset { get; }
		public WebKit.DOMNode focus_node { get; }
		public long focus_offset { get; }
		public bool is_collapsed { get; }
		public long range_count { get; }
		[NoAccessorMethod]
		public string type { owned get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMDOMSettableTokenList : WebKit.DOMDOMTokenList {
		[CCode (has_construct_function = false)]
		protected DOMDOMSettableTokenList ();
		[CCode (cname = "webkit_dom_dom_settable_token_list_get_value")]
		public unowned string get_value ();
		[CCode (cname = "webkit_dom_dom_settable_token_list_set_value")]
		public void set_value (string value);
		public string value { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMDOMStringList : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMDOMStringList ();
		[CCode (cname = "webkit_dom_dom_string_list_contains")]
		public bool contains (string str);
		[CCode (cname = "webkit_dom_dom_string_list_get_length")]
		public ulong get_length ();
		[CCode (cname = "webkit_dom_dom_string_list_item")]
		public unowned string item (ulong index);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMDOMStringMap : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMDOMStringMap ();
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMDOMTokenList : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMDOMTokenList ();
		[CCode (cname = "webkit_dom_dom_token_list_add")]
		public void add (string token) throws GLib.Error;
		[CCode (cname = "webkit_dom_dom_token_list_contains")]
		public bool contains (string token) throws GLib.Error;
		[CCode (cname = "webkit_dom_dom_token_list_get_length")]
		public ulong get_length ();
		[CCode (cname = "webkit_dom_dom_token_list_item")]
		public unowned string item (ulong index);
		[CCode (cname = "webkit_dom_dom_token_list_remove")]
		public void remove (string token) throws GLib.Error;
		[CCode (cname = "webkit_dom_dom_token_list_toggle")]
		public bool toggle (string token) throws GLib.Error;
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMDOMWindow : WebKit.DOMObject, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMDOMWindow ();
		[CCode (cname = "webkit_dom_dom_window_alert")]
		public void alert (string message);
		[CCode (cname = "webkit_dom_dom_window_atob")]
		public unowned string atob (string str) throws GLib.Error;
		[CCode (cname = "webkit_dom_dom_window_blur")]
		public void blur ();
		[CCode (cname = "webkit_dom_dom_window_btoa")]
		public unowned string btoa (string str) throws GLib.Error;
		[CCode (cname = "webkit_dom_dom_window_capture_events")]
		public void capture_events ();
		[CCode (cname = "webkit_dom_dom_window_clear_interval")]
		public void clear_interval (long handle);
		[CCode (cname = "webkit_dom_dom_window_clear_timeout")]
		public void clear_timeout (long handle);
		[CCode (cname = "webkit_dom_dom_window_close")]
		public void close ();
		[CCode (cname = "webkit_dom_dom_window_confirm")]
		public bool confirm (string message);
		[CCode (cname = "webkit_dom_dom_window_find")]
		public bool find (string str, bool case_sensitive, bool backwards, bool wrap, bool whole_word, bool search_in_frames, bool show_dialog);
		[CCode (cname = "webkit_dom_dom_window_focus")]
		public void focus ();
		[CCode (cname = "webkit_dom_dom_window_get_application_cache")]
		public unowned WebKit.DOMDOMApplicationCache get_application_cache ();
		[CCode (cname = "webkit_dom_dom_window_get_client_information")]
		public unowned WebKit.DOMNavigator get_client_information ();
		[CCode (cname = "webkit_dom_dom_window_get_closed")]
		public bool get_closed ();
		[CCode (cname = "webkit_dom_dom_window_get_computed_style")]
		public unowned WebKit.DOMCSSStyleDeclaration get_computed_style (WebKit.DOMElement element, string pseudo_element);
		[CCode (cname = "webkit_dom_dom_window_get_console")]
		public unowned WebKit.DOMConsole get_console ();
		[CCode (cname = "webkit_dom_dom_window_get_default_status")]
		public unowned string get_default_status ();
		[CCode (cname = "webkit_dom_dom_window_get_device_pixel_ratio")]
		public double get_device_pixel_ratio ();
		[CCode (cname = "webkit_dom_dom_window_get_document")]
		public unowned WebKit.DOMDocument get_document ();
		[CCode (cname = "webkit_dom_dom_window_get_frame_element")]
		public unowned WebKit.DOMElement get_frame_element ();
		[CCode (cname = "webkit_dom_dom_window_get_frames")]
		public unowned WebKit.DOMDOMWindow get_frames ();
		[CCode (cname = "webkit_dom_dom_window_get_history")]
		public unowned WebKit.DOMHistory get_history ();
		[CCode (cname = "webkit_dom_dom_window_get_inner_height")]
		public long get_inner_height ();
		[CCode (cname = "webkit_dom_dom_window_get_inner_width")]
		public long get_inner_width ();
		[CCode (cname = "webkit_dom_dom_window_get_length")]
		public ulong get_length ();
		[CCode (cname = "webkit_dom_dom_window_get_local_storage")]
		public unowned WebKit.DOMStorage get_local_storage () throws GLib.Error;
		[CCode (cname = "webkit_dom_dom_window_get_locationbar")]
		public unowned WebKit.DOMBarInfo get_locationbar ();
		[CCode (cname = "webkit_dom_dom_window_get_menubar")]
		public unowned WebKit.DOMBarInfo get_menubar ();
		[CCode (cname = "webkit_dom_dom_window_get_name")]
		public unowned string get_name ();
		[CCode (cname = "webkit_dom_dom_window_get_navigator")]
		public unowned WebKit.DOMNavigator get_navigator ();
		[CCode (cname = "webkit_dom_dom_window_get_offscreen_buffering")]
		public bool get_offscreen_buffering ();
		[CCode (cname = "webkit_dom_dom_window_get_opener")]
		public unowned WebKit.DOMDOMWindow get_opener ();
		[CCode (cname = "webkit_dom_dom_window_get_outer_height")]
		public long get_outer_height ();
		[CCode (cname = "webkit_dom_dom_window_get_outer_width")]
		public long get_outer_width ();
		[CCode (cname = "webkit_dom_dom_window_get_page_x_offset")]
		public long get_page_x_offset ();
		[CCode (cname = "webkit_dom_dom_window_get_page_y_offset")]
		public long get_page_y_offset ();
		[CCode (cname = "webkit_dom_dom_window_get_parent")]
		public unowned WebKit.DOMDOMWindow get_parent ();
		[CCode (cname = "webkit_dom_dom_window_get_personalbar")]
		public unowned WebKit.DOMBarInfo get_personalbar ();
		[CCode (cname = "webkit_dom_dom_window_get_screen")]
		public unowned WebKit.DOMScreen get_screen ();
		[CCode (cname = "webkit_dom_dom_window_get_screen_left")]
		public long get_screen_left ();
		[CCode (cname = "webkit_dom_dom_window_get_screen_top")]
		public long get_screen_top ();
		[CCode (cname = "webkit_dom_dom_window_get_screen_x")]
		public long get_screen_x ();
		[CCode (cname = "webkit_dom_dom_window_get_screen_y")]
		public long get_screen_y ();
		[CCode (cname = "webkit_dom_dom_window_get_scroll_x")]
		public long get_scroll_x ();
		[CCode (cname = "webkit_dom_dom_window_get_scroll_y")]
		public long get_scroll_y ();
		[CCode (cname = "webkit_dom_dom_window_get_scrollbars")]
		public unowned WebKit.DOMBarInfo get_scrollbars ();
		[CCode (cname = "webkit_dom_dom_window_get_selection")]
		public unowned WebKit.DOMDOMSelection get_selection ();
		[CCode (cname = "webkit_dom_dom_window_get_self")]
		public unowned WebKit.DOMDOMWindow get_self ();
		[CCode (cname = "webkit_dom_dom_window_get_session_storage")]
		public unowned WebKit.DOMStorage get_session_storage () throws GLib.Error;
		[CCode (cname = "webkit_dom_dom_window_get_status")]
		public unowned string get_status ();
		[CCode (cname = "webkit_dom_dom_window_get_statusbar")]
		public unowned WebKit.DOMBarInfo get_statusbar ();
		[CCode (cname = "webkit_dom_dom_window_get_style_media")]
		public unowned WebKit.DOMStyleMedia get_style_media ();
		[CCode (cname = "webkit_dom_dom_window_get_toolbar")]
		public unowned WebKit.DOMBarInfo get_toolbar ();
		[CCode (cname = "webkit_dom_dom_window_get_top")]
		public unowned WebKit.DOMDOMWindow get_top ();
		[CCode (cname = "webkit_dom_dom_window_get_window")]
		public unowned WebKit.DOMDOMWindow get_window ();
		[CCode (cname = "webkit_dom_dom_window_match_media")]
		public unowned WebKit.DOMMediaQueryList match_media (string query);
		[CCode (cname = "webkit_dom_dom_window_move_by")]
		public void move_by (float x, float y);
		[CCode (cname = "webkit_dom_dom_window_move_to")]
		public void move_to (float x, float y);
		[CCode (cname = "webkit_dom_dom_window_print")]
		public void print ();
		[CCode (cname = "webkit_dom_dom_window_prompt")]
		public unowned string prompt (string message, string default_value);
		[CCode (cname = "webkit_dom_dom_window_release_events")]
		public void release_events ();
		[CCode (cname = "webkit_dom_dom_window_resize_by")]
		public void resize_by (float x, float y);
		[CCode (cname = "webkit_dom_dom_window_resize_to")]
		public void resize_to (float width, float height);
		[CCode (cname = "webkit_dom_dom_window_scroll")]
		public void scroll (long x, long y);
		[CCode (cname = "webkit_dom_dom_window_scroll_by")]
		public void scroll_by (long x, long y);
		[CCode (cname = "webkit_dom_dom_window_scroll_to")]
		public void scroll_to (long x, long y);
		[CCode (cname = "webkit_dom_dom_window_set_default_status")]
		public void set_default_status (string value);
		[CCode (cname = "webkit_dom_dom_window_set_name")]
		public void set_name (string value);
		[CCode (cname = "webkit_dom_dom_window_set_status")]
		public void set_status (string value);
		[CCode (cname = "webkit_dom_dom_window_stop")]
		public void stop ();
		[CCode (cname = "webkit_dom_dom_window_webkit_convert_point_from_node_to_page")]
		public unowned WebKit.DOMWebKitPoint webkit_convert_point_from_node_to_page (WebKit.DOMNode node, WebKit.DOMWebKitPoint p);
		[CCode (cname = "webkit_dom_dom_window_webkit_convert_point_from_page_to_node")]
		public unowned WebKit.DOMWebKitPoint webkit_convert_point_from_page_to_node (WebKit.DOMNode node, WebKit.DOMWebKitPoint p);
		public WebKit.DOMDOMApplicationCache application_cache { get; }
		[NoAccessorMethod]
		public WebKit.DOMNavigator client_information { owned get; set; }
		public bool closed { get; }
		[NoAccessorMethod]
		public WebKit.DOMConsole console { owned get; set; }
		public string default_status { get; set; }
		[NoAccessorMethod]
		public double device_pixel_ratio { get; set; }
		public WebKit.DOMDocument document { get; }
		public WebKit.DOMElement frame_element { get; }
		[NoAccessorMethod]
		public WebKit.DOMDOMWindow frames { owned get; set; }
		[NoAccessorMethod]
		public WebKit.DOMHistory history { owned get; set; }
		[NoAccessorMethod]
		public long inner_height { get; set; }
		[NoAccessorMethod]
		public long inner_width { get; set; }
		[NoAccessorMethod]
		public ulong length { get; set; }
		public WebKit.DOMStorage local_storage { get; }
		[NoAccessorMethod]
		public WebKit.DOMBarInfo locationbar { owned get; set; }
		[NoAccessorMethod]
		public WebKit.DOMBarInfo menubar { owned get; set; }
		public string name { get; set; }
		[NoAccessorMethod]
		public WebKit.DOMNavigator navigator { owned get; set; }
		[NoAccessorMethod]
		public bool offscreen_buffering { get; set; }
		[NoAccessorMethod]
		public WebKit.DOMDOMWindow opener { owned get; set; }
		[NoAccessorMethod]
		public long outer_height { get; set; }
		[NoAccessorMethod]
		public long outer_width { get; set; }
		public long page_x_offset { get; }
		public long page_y_offset { get; }
		[NoAccessorMethod]
		public WebKit.DOMDOMWindow parent { owned get; set; }
		[NoAccessorMethod]
		public WebKit.DOMBarInfo personalbar { owned get; set; }
		[NoAccessorMethod]
		public WebKit.DOMScreen screen { owned get; set; }
		[NoAccessorMethod]
		public long screen_left { get; set; }
		[NoAccessorMethod]
		public long screen_top { get; set; }
		[NoAccessorMethod]
		public long screen_x { get; set; }
		[NoAccessorMethod]
		public long screen_y { get; set; }
		[NoAccessorMethod]
		public long scroll_x { get; set; }
		[NoAccessorMethod]
		public long scroll_y { get; set; }
		[NoAccessorMethod]
		public WebKit.DOMBarInfo scrollbars { owned get; set; }
		[NoAccessorMethod]
		public WebKit.DOMDOMWindow self { owned get; set; }
		public WebKit.DOMStorage session_storage { get; }
		public string status { get; set; }
		[NoAccessorMethod]
		public WebKit.DOMBarInfo statusbar { owned get; set; }
		public WebKit.DOMStyleMedia style_media { get; }
		[NoAccessorMethod]
		public WebKit.DOMBarInfo toolbar { owned get; set; }
		[NoAccessorMethod]
		public WebKit.DOMDOMWindow top { owned get; set; }
		public WebKit.DOMDOMWindow window { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMDatabase : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMDatabase ();
		public unowned string get_version ();
		public string version { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMDocument : WebKit.DOMNode, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMDocument ();
		public unowned WebKit.DOMNode adopt_node (WebKit.DOMNode source) throws GLib.Error;
		public unowned WebKit.DOMRange caret_range_from_point (long x, long y);
		public unowned WebKit.DOMAttr create_attribute (string name) throws GLib.Error;
		public unowned WebKit.DOMAttr create_attribute_ns (string namespace_uri, string qualified_name) throws GLib.Error;
		public unowned WebKit.DOMCDATASection create_cdata_section (string data) throws GLib.Error;
		public unowned WebKit.DOMComment create_comment (string data);
		public unowned WebKit.DOMCSSStyleDeclaration create_css_style_declaration ();
		public unowned WebKit.DOMDocumentFragment create_document_fragment ();
		public unowned WebKit.DOMElement create_element (string tag_name) throws GLib.Error;
		public unowned WebKit.DOMElement create_element_ns (string namespace_uri, string qualified_name) throws GLib.Error;
		public unowned WebKit.DOMEntityReference create_entity_reference (string name) throws GLib.Error;
		public unowned WebKit.DOMEvent create_event (string event_type) throws GLib.Error;
		public unowned WebKit.DOMXPathExpression create_expression (string expression, WebKit.DOMXPathNSResolver resolver) throws GLib.Error;
		public unowned WebKit.DOMNodeIterator create_node_iterator (WebKit.DOMNode root, ulong what_to_show, WebKit.DOMNodeFilter filter, bool expand_entity_references) throws GLib.Error;
		public unowned WebKit.DOMXPathNSResolver create_ns_resolver (WebKit.DOMNode node_resolver);
		public unowned WebKit.DOMProcessingInstruction create_processing_instruction (string target, string data) throws GLib.Error;
		public unowned WebKit.DOMRange create_range ();
		public unowned WebKit.DOMText create_text_node (string data);
		public unowned WebKit.DOMTreeWalker create_tree_walker (WebKit.DOMNode root, ulong what_to_show, WebKit.DOMNodeFilter filter, bool expand_entity_references) throws GLib.Error;
		public unowned WebKit.DOMElement element_from_point (long x, long y);
		public unowned WebKit.DOMXPathResult evaluate (string expression, WebKit.DOMNode context_node, WebKit.DOMXPathNSResolver resolver, ushort type, WebKit.DOMXPathResult in_result) throws GLib.Error;
		public bool exec_command (string command, bool user_interface, string value);
		public unowned WebKit.DOMHTMLCollection get_anchors ();
		public unowned WebKit.DOMHTMLCollection get_applets ();
		public unowned WebKit.DOMHTMLElement get_body ();
		public unowned string get_character_set ();
		public unowned string get_charset ();
		public unowned string get_compat_mode ();
		public unowned string get_cookie () throws GLib.Error;
		public unowned string get_default_charset ();
		public unowned WebKit.DOMDOMWindow get_default_view ();
		public unowned WebKit.DOMDocumentType get_doctype ();
		public unowned WebKit.DOMElement get_document_element ();
		public unowned string get_document_uri ();
		public unowned string get_domain ();
		public unowned WebKit.DOMElement get_element_by_id (string element_id);
		public unowned WebKit.DOMNodeList get_elements_by_class_name (string tagname);
		public unowned WebKit.DOMNodeList get_elements_by_name (string element_name);
		public unowned WebKit.DOMNodeList get_elements_by_tag_name (string tagname);
		public unowned WebKit.DOMNodeList get_elements_by_tag_name_ns (string namespace_uri, string local_name);
		public unowned WebKit.DOMHTMLCollection get_forms ();
		public unowned WebKit.DOMHTMLHeadElement get_head ();
		public unowned WebKit.DOMHTMLCollection get_images ();
		public unowned WebKit.DOMDOMImplementation get_implementation ();
		public unowned string get_input_encoding ();
		public unowned string get_last_modified ();
		public unowned WebKit.DOMHTMLCollection get_links ();
		public unowned WebKit.DOMCSSStyleDeclaration get_override_style (WebKit.DOMElement element, string pseudo_element);
		public unowned string get_preferred_stylesheet_set ();
		public unowned string get_ready_state ();
		public unowned string get_referrer ();
		public unowned string get_selected_stylesheet_set ();
		public unowned WebKit.DOMStyleSheetList get_style_sheets ();
		public unowned string get_title ();
		public unowned WebKit.DOMElement get_webkit_current_full_screen_element ();
		public bool get_webkit_full_screen_keyboard_input_allowed ();
		public bool get_webkit_hidden ();
		public bool get_webkit_is_full_screen ();
		public unowned string get_webkit_visibility_state ();
		public unowned string get_xml_encoding ();
		public bool get_xml_standalone ();
		public unowned string get_xml_version ();
		public unowned WebKit.DOMNode import_node (WebKit.DOMNode imported_node, bool deep) throws GLib.Error;
		public bool query_command_enabled (string command);
		public bool query_command_indeterm (string command);
		public bool query_command_state (string command);
		public bool query_command_supported (string command);
		public unowned string query_command_value (string command);
		public unowned WebKit.DOMElement query_selector (string selectors) throws GLib.Error;
		public unowned WebKit.DOMNodeList query_selector_all (string selectors) throws GLib.Error;
		public void set_body (WebKit.DOMHTMLElement value) throws GLib.Error;
		public void set_charset (string value);
		public void set_cookie (string value) throws GLib.Error;
		public void set_document_uri (string value);
		public void set_selected_stylesheet_set (string value);
		public void set_title (string value);
		public void set_xml_standalone (bool value) throws GLib.Error;
		public void set_xml_version (string value) throws GLib.Error;
		public void webkit_cancel_full_screen ();
		public WebKit.DOMHTMLCollection anchors { get; }
		public WebKit.DOMHTMLCollection applets { get; }
		public WebKit.DOMHTMLElement body { get; set; }
		public string character_set { get; }
		public string charset { get; set; }
		public string compat_mode { get; }
		public string cookie { get; set; }
		public string default_charset { get; }
		public WebKit.DOMDOMWindow default_view { get; }
		public WebKit.DOMDocumentType doctype { get; }
		public WebKit.DOMElement document_element { get; }
		public string document_uri { get; set; }
		public string domain { get; }
		public WebKit.DOMHTMLCollection forms { get; }
		public WebKit.DOMHTMLHeadElement head { get; }
		public WebKit.DOMHTMLCollection images { get; }
		public WebKit.DOMDOMImplementation implementation { get; }
		public string input_encoding { get; }
		public string last_modified { get; }
		public WebKit.DOMHTMLCollection links { get; }
		public string preferred_stylesheet_set { get; }
		public string ready_state { get; }
		public string referrer { get; }
		public string selected_stylesheet_set { get; set; }
		public WebKit.DOMStyleSheetList style_sheets { get; }
		public string title { get; set; }
		[NoAccessorMethod]
		public string url { owned get; }
		public WebKit.DOMElement webkit_current_full_screen_element { get; }
		public bool webkit_full_screen_keyboard_input_allowed { get; }
		public bool webkit_is_full_screen { get; }
		public string xml_encoding { get; }
		public bool xml_standalone { get; set; }
		public string xml_version { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMDocumentFragment : WebKit.DOMNode, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMDocumentFragment ();
		public unowned WebKit.DOMElement query_selector (string selectors) throws GLib.Error;
		public unowned WebKit.DOMNodeList query_selector_all (string selectors) throws GLib.Error;
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMDocumentType : WebKit.DOMNode, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMDocumentType ();
		public unowned WebKit.DOMNamedNodeMap get_entities ();
		public unowned string get_internal_subset ();
		public unowned string get_name ();
		public unowned WebKit.DOMNamedNodeMap get_notations ();
		public unowned string get_public_id ();
		public unowned string get_system_id ();
		public WebKit.DOMNamedNodeMap entities { get; }
		public string internal_subset { get; }
		public string name { get; }
		public WebKit.DOMNamedNodeMap notations { get; }
		public string public_id { get; }
		public string system_id { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMElement : WebKit.DOMNode, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMElement ();
		public void blur ();
		public void focus ();
		public unowned string get_attribute (string name);
		public unowned WebKit.DOMAttr get_attribute_node (string name);
		public unowned WebKit.DOMAttr get_attribute_node_ns (string namespace_uri, string local_name);
		public unowned string get_attribute_ns (string namespace_uri, string local_name);
		public ulong get_child_element_count ();
		public long get_client_height ();
		public long get_client_left ();
		public long get_client_top ();
		public long get_client_width ();
		public unowned WebKit.DOMNodeList get_elements_by_class_name (string name);
		public unowned WebKit.DOMNodeList get_elements_by_tag_name (string name);
		public unowned WebKit.DOMNodeList get_elements_by_tag_name_ns (string namespace_uri, string local_name);
		public unowned WebKit.DOMElement get_first_element_child ();
		public unowned WebKit.DOMElement get_last_element_child ();
		public unowned WebKit.DOMElement get_next_element_sibling ();
		public long get_offset_height ();
		public long get_offset_left ();
		public unowned WebKit.DOMElement get_offset_parent ();
		public long get_offset_top ();
		public long get_offset_width ();
		public unowned WebKit.DOMElement get_previous_element_sibling ();
		public long get_scroll_height ();
		public long get_scroll_left ();
		public long get_scroll_top ();
		public long get_scroll_width ();
		public unowned WebKit.DOMCSSStyleDeclaration get_style ();
		public unowned string get_tag_name ();
		public bool has_attribute (string name);
		public bool has_attribute_ns (string namespace_uri, string local_name);
		public unowned WebKit.DOMElement query_selector (string selectors) throws GLib.Error;
		public unowned WebKit.DOMNodeList query_selector_all (string selectors) throws GLib.Error;
		public void remove_attribute (string name) throws GLib.Error;
		public unowned WebKit.DOMAttr remove_attribute_node (WebKit.DOMAttr old_attr) throws GLib.Error;
		public void remove_attribute_ns (string namespace_uri, string local_name) throws GLib.Error;
		public void scroll_by_lines (long lines);
		public void scroll_by_pages (long pages);
		public void scroll_into_view (bool align_with_top);
		public void scroll_into_view_if_needed (bool center_if_needed);
		public void set_attribute (string name, string value) throws GLib.Error;
		public unowned WebKit.DOMAttr set_attribute_node (WebKit.DOMAttr new_attr) throws GLib.Error;
		public unowned WebKit.DOMAttr set_attribute_node_ns (WebKit.DOMAttr new_attr) throws GLib.Error;
		public void set_attribute_ns (string namespace_uri, string qualified_name, string value) throws GLib.Error;
		public void set_scroll_left (long value);
		public void set_scroll_top (long value);
		public bool webkit_matches_selector (string selectors) throws GLib.Error;
		public void webkit_request_full_screen (ushort flags);
		public ulong child_element_count { get; }
		public long client_height { get; }
		public long client_left { get; }
		public long client_top { get; }
		public long client_width { get; }
		public WebKit.DOMElement first_element_child { get; }
		public WebKit.DOMElement last_element_child { get; }
		public WebKit.DOMElement next_element_sibling { get; }
		public long offset_height { get; }
		public long offset_left { get; }
		public WebKit.DOMElement offset_parent { get; }
		public long offset_top { get; }
		public long offset_width { get; }
		public WebKit.DOMElement previous_element_sibling { get; }
		public long scroll_height { get; }
		public long scroll_left { get; set; }
		public long scroll_top { get; set; }
		public long scroll_width { get; }
		public WebKit.DOMCSSStyleDeclaration style { get; }
		public string tag_name { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMEntityReference : WebKit.DOMNode, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMEntityReference ();
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMEvent : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMEvent ();
		public bool get_bubbles ();
		public bool get_cancel_bubble ();
		public bool get_cancelable ();
		public unowned WebKit.DOMEventTarget get_current_target ();
		public bool get_default_prevented ();
		public ushort get_event_phase ();
		public bool get_return_value ();
		public unowned WebKit.DOMEventTarget get_src_element ();
		public unowned WebKit.DOMEventTarget get_target ();
		public uint32 get_time_stamp ();
		public void init_event (string event_type_arg, bool can_bubble_arg, bool cancelable_arg);
		public void prevent_default ();
		public void set_cancel_bubble (bool value);
		public void set_return_value (bool value);
		public void stop_immediate_propagation ();
		public void stop_propagation ();
		public bool bubbles { get; }
		public bool cancel_bubble { get; set; }
		public bool cancelable { get; }
		public WebKit.DOMEventTarget current_target { get; }
		public bool default_prevented { get; }
		public uint event_phase { get; }
		public bool return_value { get; set; }
		public WebKit.DOMEventTarget src_element { get; }
		public WebKit.DOMEventTarget target { get; }
		public uint time_stamp { get; }
		[NoAccessorMethod]
		public string type { owned get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	[Compact]
	public class DOMEventTargetClass {
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMFile : WebKit.DOMBlob {
		[CCode (has_construct_function = false)]
		protected DOMFile ();
		public unowned string get_file_name ();
		public uint64 get_file_size ();
		public unowned string get_name ();
		public string file_name { get; }
		public uint64 file_size { get; }
		public string name { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMFileList : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMFileList ();
		public ulong get_length ();
		public unowned WebKit.DOMFile item (ulong index);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMGeolocation : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMGeolocation ();
		public void clear_watch (long watch_id);
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLAnchorElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLAnchorElement ();
		[CCode (cname = "webkit_dom_html_anchor_element_get_access_key")]
		public unowned string get_access_key ();
		[CCode (cname = "webkit_dom_html_anchor_element_get_charset")]
		public unowned string get_charset ();
		[CCode (cname = "webkit_dom_html_anchor_element_get_coords")]
		public unowned string get_coords ();
		[CCode (cname = "webkit_dom_html_anchor_element_get_download")]
		public unowned string get_download ();
		[CCode (cname = "webkit_dom_html_anchor_element_get_hash")]
		public unowned string get_hash ();
		[CCode (cname = "webkit_dom_html_anchor_element_get_host")]
		public unowned string get_host ();
		[CCode (cname = "webkit_dom_html_anchor_element_get_hostname")]
		public unowned string get_hostname ();
		[CCode (cname = "webkit_dom_html_anchor_element_get_href")]
		public unowned string get_href ();
		[CCode (cname = "webkit_dom_html_anchor_element_get_hreflang")]
		public unowned string get_hreflang ();
		[CCode (cname = "webkit_dom_html_anchor_element_get_name")]
		public unowned string get_name ();
		[CCode (cname = "webkit_dom_html_anchor_element_get_origin")]
		public unowned string get_origin ();
		[CCode (cname = "webkit_dom_html_anchor_element_get_parameter")]
		public unowned string get_parameter (string name);
		[CCode (cname = "webkit_dom_html_anchor_element_get_pathname")]
		public unowned string get_pathname ();
		[CCode (cname = "webkit_dom_html_anchor_element_get_ping")]
		public unowned string get_ping ();
		[CCode (cname = "webkit_dom_html_anchor_element_get_port")]
		public unowned string get_port ();
		[CCode (cname = "webkit_dom_html_anchor_element_get_protocol")]
		public unowned string get_protocol ();
		[CCode (cname = "webkit_dom_html_anchor_element_get_rel")]
		public unowned string get_rel ();
		[CCode (cname = "webkit_dom_html_anchor_element_get_rev")]
		public unowned string get_rev ();
		[CCode (cname = "webkit_dom_html_anchor_element_get_search")]
		public unowned string get_search ();
		[CCode (cname = "webkit_dom_html_anchor_element_get_shape")]
		public unowned string get_shape ();
		[CCode (cname = "webkit_dom_html_anchor_element_get_target")]
		public unowned string get_target ();
		[CCode (cname = "webkit_dom_html_anchor_element_get_text")]
		public unowned string get_text ();
		[CCode (cname = "webkit_dom_html_anchor_element_set_access_key")]
		public void set_access_key (string value);
		[CCode (cname = "webkit_dom_html_anchor_element_set_charset")]
		public void set_charset (string value);
		[CCode (cname = "webkit_dom_html_anchor_element_set_coords")]
		public void set_coords (string value);
		[CCode (cname = "webkit_dom_html_anchor_element_set_download")]
		public void set_download (string value);
		[CCode (cname = "webkit_dom_html_anchor_element_set_hash")]
		public void set_hash (string value);
		[CCode (cname = "webkit_dom_html_anchor_element_set_host")]
		public void set_host (string value);
		[CCode (cname = "webkit_dom_html_anchor_element_set_hostname")]
		public void set_hostname (string value);
		[CCode (cname = "webkit_dom_html_anchor_element_set_href")]
		public void set_href (string value);
		[CCode (cname = "webkit_dom_html_anchor_element_set_hreflang")]
		public void set_hreflang (string value);
		[CCode (cname = "webkit_dom_html_anchor_element_set_name")]
		public void set_name (string value);
		[CCode (cname = "webkit_dom_html_anchor_element_set_pathname")]
		public void set_pathname (string value);
		[CCode (cname = "webkit_dom_html_anchor_element_set_ping")]
		public void set_ping (string value);
		[CCode (cname = "webkit_dom_html_anchor_element_set_port")]
		public void set_port (string value);
		[CCode (cname = "webkit_dom_html_anchor_element_set_protocol")]
		public void set_protocol (string value);
		[CCode (cname = "webkit_dom_html_anchor_element_set_rel")]
		public void set_rel (string value);
		[CCode (cname = "webkit_dom_html_anchor_element_set_rev")]
		public void set_rev (string value);
		[CCode (cname = "webkit_dom_html_anchor_element_set_search")]
		public void set_search (string value);
		[CCode (cname = "webkit_dom_html_anchor_element_set_shape")]
		public void set_shape (string value);
		[CCode (cname = "webkit_dom_html_anchor_element_set_target")]
		public void set_target (string value);
		public string access_key { get; set; }
		public string charset { get; set; }
		public string coords { get; set; }
		public string hash { get; set; }
		public string host { get; set; }
		public string hostname { get; set; }
		public string href { get; set; }
		public string hreflang { get; set; }
		public string name { get; set; }
		public string origin { get; }
		public string pathname { get; set; }
		public string ping { get; set; }
		public string port { get; set; }
		public string protocol { get; set; }
		public string rel { get; set; }
		public string rev { get; set; }
		public string search { get; set; }
		public string shape { get; set; }
		public string target { get; set; }
		public string text { get; }
		[NoAccessorMethod]
		public string type { owned get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLAppletElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLAppletElement ();
		[CCode (cname = "webkit_dom_html_applet_element_get_align")]
		public unowned string get_align ();
		[CCode (cname = "webkit_dom_html_applet_element_get_alt")]
		public unowned string get_alt ();
		[CCode (cname = "webkit_dom_html_applet_element_get_archive")]
		public unowned string get_archive ();
		[CCode (cname = "webkit_dom_html_applet_element_get_code")]
		public unowned string get_code ();
		[CCode (cname = "webkit_dom_html_applet_element_get_code_base")]
		public unowned string get_code_base ();
		[CCode (cname = "webkit_dom_html_applet_element_get_height")]
		public unowned string get_height ();
		[CCode (cname = "webkit_dom_html_applet_element_get_hspace")]
		public long get_hspace ();
		[CCode (cname = "webkit_dom_html_applet_element_get_name")]
		public unowned string get_name ();
		[CCode (cname = "webkit_dom_html_applet_element_get_object")]
		public unowned string get_object ();
		[CCode (cname = "webkit_dom_html_applet_element_get_vspace")]
		public long get_vspace ();
		[CCode (cname = "webkit_dom_html_applet_element_get_width")]
		public unowned string get_width ();
		[CCode (cname = "webkit_dom_html_applet_element_set_align")]
		public void set_align (string value);
		[CCode (cname = "webkit_dom_html_applet_element_set_alt")]
		public void set_alt (string value);
		[CCode (cname = "webkit_dom_html_applet_element_set_archive")]
		public void set_archive (string value);
		[CCode (cname = "webkit_dom_html_applet_element_set_code")]
		public void set_code (string value);
		[CCode (cname = "webkit_dom_html_applet_element_set_code_base")]
		public void set_code_base (string value);
		[CCode (cname = "webkit_dom_html_applet_element_set_height")]
		public void set_height (string value);
		[CCode (cname = "webkit_dom_html_applet_element_set_hspace")]
		public void set_hspace (long value);
		[CCode (cname = "webkit_dom_html_applet_element_set_name")]
		public void set_name (string value);
		[CCode (cname = "webkit_dom_html_applet_element_set_object")]
		public void set_object (string value);
		[CCode (cname = "webkit_dom_html_applet_element_set_vspace")]
		public void set_vspace (long value);
		[CCode (cname = "webkit_dom_html_applet_element_set_width")]
		public void set_width (string value);
		public string align { get; set; }
		public string alt { get; set; }
		public string archive { get; set; }
		public string code { get; set; }
		public string code_base { get; set; }
		public string height { get; set; }
		public long hspace { get; set; }
		public string name { get; set; }
		public string object { get; set; }
		public long vspace { get; set; }
		public string width { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLAreaElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLAreaElement ();
		[CCode (cname = "webkit_dom_html_area_element_get_access_key")]
		public unowned string get_access_key ();
		[CCode (cname = "webkit_dom_html_area_element_get_alt")]
		public unowned string get_alt ();
		[CCode (cname = "webkit_dom_html_area_element_get_coords")]
		public unowned string get_coords ();
		[CCode (cname = "webkit_dom_html_area_element_get_hash")]
		public unowned string get_hash ();
		[CCode (cname = "webkit_dom_html_area_element_get_host")]
		public unowned string get_host ();
		[CCode (cname = "webkit_dom_html_area_element_get_hostname")]
		public unowned string get_hostname ();
		[CCode (cname = "webkit_dom_html_area_element_get_href")]
		public unowned string get_href ();
		[CCode (cname = "webkit_dom_html_area_element_get_no_href")]
		public bool get_no_href ();
		[CCode (cname = "webkit_dom_html_area_element_get_pathname")]
		public unowned string get_pathname ();
		[CCode (cname = "webkit_dom_html_area_element_get_ping")]
		public unowned string get_ping ();
		[CCode (cname = "webkit_dom_html_area_element_get_port")]
		public unowned string get_port ();
		[CCode (cname = "webkit_dom_html_area_element_get_protocol")]
		public unowned string get_protocol ();
		[CCode (cname = "webkit_dom_html_area_element_get_search")]
		public unowned string get_search ();
		[CCode (cname = "webkit_dom_html_area_element_get_shape")]
		public unowned string get_shape ();
		[CCode (cname = "webkit_dom_html_area_element_get_target")]
		public unowned string get_target ();
		[CCode (cname = "webkit_dom_html_area_element_set_access_key")]
		public void set_access_key (string value);
		[CCode (cname = "webkit_dom_html_area_element_set_alt")]
		public void set_alt (string value);
		[CCode (cname = "webkit_dom_html_area_element_set_coords")]
		public void set_coords (string value);
		[CCode (cname = "webkit_dom_html_area_element_set_href")]
		public void set_href (string value);
		[CCode (cname = "webkit_dom_html_area_element_set_no_href")]
		public void set_no_href (bool value);
		[CCode (cname = "webkit_dom_html_area_element_set_ping")]
		public void set_ping (string value);
		[CCode (cname = "webkit_dom_html_area_element_set_shape")]
		public void set_shape (string value);
		[CCode (cname = "webkit_dom_html_area_element_set_target")]
		public void set_target (string value);
		public string access_key { get; set; }
		public string alt { get; set; }
		public string coords { get; set; }
		public string hash { get; }
		public string host { get; }
		public string hostname { get; }
		public string href { get; set; }
		public bool no_href { get; set; }
		public string pathname { get; }
		public string ping { get; set; }
		public string port { get; }
		public string protocol { get; }
		public string search { get; }
		public string shape { get; set; }
		public string target { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLAudioElement : WebKit.DOMHTMLMediaElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLAudioElement ();
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLBRElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLBRElement ();
		[CCode (cname = "webkit_dom_htmlbr_element_get_clear")]
		public unowned string get_clear ();
		[CCode (cname = "webkit_dom_htmlbr_element_set_clear")]
		public void set_clear (string value);
		public string clear { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLBaseElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLBaseElement ();
		[CCode (cname = "webkit_dom_html_base_element_get_href")]
		public unowned string get_href ();
		[CCode (cname = "webkit_dom_html_base_element_get_target")]
		public unowned string get_target ();
		[CCode (cname = "webkit_dom_html_base_element_set_href")]
		public void set_href (string value);
		[CCode (cname = "webkit_dom_html_base_element_set_target")]
		public void set_target (string value);
		public string href { get; set; }
		public string target { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLBaseFontElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLBaseFontElement ();
		[CCode (cname = "webkit_dom_html_base_font_element_get_color")]
		public unowned string get_color ();
		[CCode (cname = "webkit_dom_html_base_font_element_get_face")]
		public unowned string get_face ();
		[CCode (cname = "webkit_dom_html_base_font_element_get_size")]
		public long get_size ();
		[CCode (cname = "webkit_dom_html_base_font_element_set_color")]
		public void set_color (string value);
		[CCode (cname = "webkit_dom_html_base_font_element_set_face")]
		public void set_face (string value);
		[CCode (cname = "webkit_dom_html_base_font_element_set_size")]
		public void set_size (long value);
		public string color { get; set; }
		public string face { get; set; }
		public long size { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLBodyElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLBodyElement ();
		[CCode (cname = "webkit_dom_html_body_element_get_a_link")]
		public unowned string get_a_link ();
		[CCode (cname = "webkit_dom_html_body_element_get_background")]
		public unowned string get_background ();
		[CCode (cname = "webkit_dom_html_body_element_get_bg_color")]
		public unowned string get_bg_color ();
		[CCode (cname = "webkit_dom_html_body_element_get_link")]
		public unowned string get_link ();
		[CCode (cname = "webkit_dom_html_body_element_get_text")]
		public unowned string get_text ();
		[CCode (cname = "webkit_dom_html_body_element_get_v_link")]
		public unowned string get_v_link ();
		[CCode (cname = "webkit_dom_html_body_element_set_a_link")]
		public void set_a_link (string value);
		[CCode (cname = "webkit_dom_html_body_element_set_background")]
		public void set_background (string value);
		[CCode (cname = "webkit_dom_html_body_element_set_bg_color")]
		public void set_bg_color (string value);
		[CCode (cname = "webkit_dom_html_body_element_set_link")]
		public void set_link (string value);
		[CCode (cname = "webkit_dom_html_body_element_set_text")]
		public void set_text (string value);
		[CCode (cname = "webkit_dom_html_body_element_set_v_link")]
		public void set_v_link (string value);
		public string a_link { get; set; }
		public string background { get; set; }
		public string bg_color { get; set; }
		public string link { get; set; }
		public string text { get; set; }
		public string v_link { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLButtonElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLButtonElement ();
		[CCode (cname = "webkit_dom_html_button_element_check_validity")]
		public bool check_validity ();
		[CCode (cname = "webkit_dom_html_button_element_click")]
		public void click ();
		[CCode (cname = "webkit_dom_html_button_element_get_access_key")]
		public unowned string get_access_key ();
		[CCode (cname = "webkit_dom_html_button_element_get_autofocus")]
		public bool get_autofocus ();
		[CCode (cname = "webkit_dom_html_button_element_get_disabled")]
		public bool get_disabled ();
		[CCode (cname = "webkit_dom_html_button_element_get_form")]
		public unowned WebKit.DOMHTMLFormElement get_form ();
		[CCode (cname = "webkit_dom_html_button_element_get_form_action")]
		public unowned string get_form_action ();
		[CCode (cname = "webkit_dom_html_button_element_get_form_enctype")]
		public unowned string get_form_enctype ();
		[CCode (cname = "webkit_dom_html_button_element_get_form_method")]
		public unowned string get_form_method ();
		[CCode (cname = "webkit_dom_html_button_element_get_form_no_validate")]
		public bool get_form_no_validate ();
		[CCode (cname = "webkit_dom_html_button_element_get_form_target")]
		public unowned string get_form_target ();
		[CCode (cname = "webkit_dom_html_button_element_get_labels")]
		public unowned WebKit.DOMNodeList get_labels ();
		[CCode (cname = "webkit_dom_html_button_element_get_name")]
		public unowned string get_name ();
		[CCode (cname = "webkit_dom_html_button_element_get_validation_message")]
		public unowned string get_validation_message ();
		[CCode (cname = "webkit_dom_html_button_element_get_validity")]
		public unowned WebKit.DOMValidityState get_validity ();
		[CCode (cname = "webkit_dom_html_button_element_get_value")]
		public unowned string get_value ();
		[CCode (cname = "webkit_dom_html_button_element_get_will_validate")]
		public bool get_will_validate ();
		[CCode (cname = "webkit_dom_html_button_element_set_access_key")]
		public void set_access_key (string value);
		[CCode (cname = "webkit_dom_html_button_element_set_autofocus")]
		public void set_autofocus (bool value);
		[CCode (cname = "webkit_dom_html_button_element_set_custom_validity")]
		public void set_custom_validity (string error);
		[CCode (cname = "webkit_dom_html_button_element_set_disabled")]
		public void set_disabled (bool value);
		[CCode (cname = "webkit_dom_html_button_element_set_form_action")]
		public void set_form_action (string value);
		[CCode (cname = "webkit_dom_html_button_element_set_form_enctype")]
		public void set_form_enctype (string value);
		[CCode (cname = "webkit_dom_html_button_element_set_form_method")]
		public void set_form_method (string value);
		[CCode (cname = "webkit_dom_html_button_element_set_form_no_validate")]
		public void set_form_no_validate (bool value);
		[CCode (cname = "webkit_dom_html_button_element_set_form_target")]
		public void set_form_target (string value);
		[CCode (cname = "webkit_dom_html_button_element_set_name")]
		public void set_name (string value);
		[CCode (cname = "webkit_dom_html_button_element_set_value")]
		public void set_value (string value);
		public string access_key { get; set; }
		public bool autofocus { get; set; }
		public bool disabled { get; set; }
		public WebKit.DOMHTMLFormElement form { get; }
		public string form_action { get; set; }
		public string form_enctype { get; set; }
		public string form_method { get; set; }
		public bool form_no_validate { get; set; }
		public string form_target { get; set; }
		public WebKit.DOMNodeList labels { get; }
		public string name { get; set; }
		[NoAccessorMethod]
		public string type { owned get; }
		public string validation_message { get; }
		public WebKit.DOMValidityState validity { get; }
		public string value { get; set; }
		public bool will_validate { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLCanvasElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLCanvasElement ();
		[CCode (cname = "webkit_dom_html_canvas_element_get_height")]
		public long get_height ();
		[CCode (cname = "webkit_dom_html_canvas_element_get_width")]
		public long get_width ();
		[CCode (cname = "webkit_dom_html_canvas_element_set_height")]
		public void set_height (long value);
		[CCode (cname = "webkit_dom_html_canvas_element_set_width")]
		public void set_width (long value);
		public long height { get; set; }
		public long width { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLCollection : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMHTMLCollection ();
		[CCode (cname = "webkit_dom_html_collection_get_length")]
		public ulong get_length ();
		[CCode (cname = "webkit_dom_html_collection_item")]
		public unowned WebKit.DOMNode item (ulong index);
		[CCode (cname = "webkit_dom_html_collection_named_item")]
		public unowned WebKit.DOMNode named_item (string name);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLDListElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLDListElement ();
		[CCode (cname = "webkit_dom_htmld_list_element_get_compact")]
		public bool get_compact ();
		[CCode (cname = "webkit_dom_htmld_list_element_set_compact")]
		public void set_compact (bool value);
		public bool compact { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLDetailsElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLDetailsElement ();
		[CCode (cname = "webkit_dom_html_details_element_get_open")]
		public bool get_open ();
		[CCode (cname = "webkit_dom_html_details_element_set_open")]
		public void set_open (bool value);
		public bool open { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLDirectoryElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLDirectoryElement ();
		[CCode (cname = "webkit_dom_html_directory_element_get_compact")]
		public bool get_compact ();
		[CCode (cname = "webkit_dom_html_directory_element_set_compact")]
		public void set_compact (bool value);
		public bool compact { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLDivElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLDivElement ();
		[CCode (cname = "webkit_dom_html_div_element_get_align")]
		public unowned string get_align ();
		[CCode (cname = "webkit_dom_html_div_element_set_align")]
		public void set_align (string value);
		public string align { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLDocument : WebKit.DOMDocument, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLDocument ();
		[CCode (cname = "webkit_dom_html_document_capture_events")]
		public void capture_events ();
		[CCode (cname = "webkit_dom_html_document_clear")]
		public void clear ();
		[CCode (cname = "webkit_dom_html_document_close")]
		public void close ();
		[CCode (cname = "webkit_dom_html_document_get_active_element")]
		public unowned WebKit.DOMElement get_active_element ();
		[CCode (cname = "webkit_dom_html_document_get_alink_color")]
		public unowned string get_alink_color ();
		[CCode (cname = "webkit_dom_html_document_get_bg_color")]
		public unowned string get_bg_color ();
		[CCode (cname = "webkit_dom_html_document_get_compat_mode")]
		public unowned string get_compat_mode ();
		[CCode (cname = "webkit_dom_html_document_get_design_mode")]
		public unowned string get_design_mode ();
		[CCode (cname = "webkit_dom_html_document_get_dir")]
		public unowned string get_dir ();
		[CCode (cname = "webkit_dom_html_document_get_embeds")]
		public unowned WebKit.DOMHTMLCollection get_embeds ();
		[CCode (cname = "webkit_dom_html_document_get_fg_color")]
		public unowned string get_fg_color ();
		[CCode (cname = "webkit_dom_html_document_get_height")]
		public long get_height ();
		[CCode (cname = "webkit_dom_html_document_get_link_color")]
		public unowned string get_link_color ();
		[CCode (cname = "webkit_dom_html_document_get_plugins")]
		public unowned WebKit.DOMHTMLCollection get_plugins ();
		[CCode (cname = "webkit_dom_html_document_get_scripts")]
		public unowned WebKit.DOMHTMLCollection get_scripts ();
		[CCode (cname = "webkit_dom_html_document_get_vlink_color")]
		public unowned string get_vlink_color ();
		[CCode (cname = "webkit_dom_html_document_get_width")]
		public long get_width ();
		[CCode (cname = "webkit_dom_html_document_has_focus")]
		public bool has_focus ();
		[CCode (cname = "webkit_dom_html_document_release_events")]
		public void release_events ();
		[CCode (cname = "webkit_dom_html_document_set_alink_color")]
		public void set_alink_color (string value);
		[CCode (cname = "webkit_dom_html_document_set_bg_color")]
		public void set_bg_color (string value);
		[CCode (cname = "webkit_dom_html_document_set_design_mode")]
		public void set_design_mode (string value);
		[CCode (cname = "webkit_dom_html_document_set_dir")]
		public void set_dir (string value);
		[CCode (cname = "webkit_dom_html_document_set_fg_color")]
		public void set_fg_color (string value);
		[CCode (cname = "webkit_dom_html_document_set_link_color")]
		public void set_link_color (string value);
		[CCode (cname = "webkit_dom_html_document_set_vlink_color")]
		public void set_vlink_color (string value);
		public WebKit.DOMElement active_element { get; }
		public string alink_color { get; set; }
		public string bg_color { get; set; }
		public string compat_mode { get; }
		public string design_mode { get; set; }
		public string dir { get; set; }
		public WebKit.DOMHTMLCollection embeds { get; }
		public string fg_color { get; set; }
		public long height { get; }
		public string link_color { get; set; }
		public WebKit.DOMHTMLCollection plugins { get; }
		public WebKit.DOMHTMLCollection scripts { get; }
		public string vlink_color { get; set; }
		public long width { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLElement : WebKit.DOMElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLElement ();
		[CCode (cname = "webkit_dom_html_element_get_children")]
		public unowned WebKit.DOMHTMLCollection get_children ();
		[CCode (cname = "webkit_dom_html_element_get_class_list")]
		public unowned WebKit.DOMDOMTokenList get_class_list ();
		[CCode (cname = "webkit_dom_html_element_get_class_name")]
		public unowned string get_class_name ();
		[CCode (cname = "webkit_dom_html_element_get_content_editable")]
		public unowned string get_content_editable ();
		[CCode (cname = "webkit_dom_html_element_get_dir")]
		public unowned string get_dir ();
		[CCode (cname = "webkit_dom_html_element_get_draggable")]
		public bool get_draggable ();
		[CCode (cname = "webkit_dom_html_element_get_hidden")]
		public bool get_hidden ();
		[CCode (cname = "webkit_dom_html_element_get_id")]
		public unowned string get_id ();
		[CCode (cname = "webkit_dom_html_element_get_inner_html")]
		public unowned string get_inner_html ();
		[CCode (cname = "webkit_dom_html_element_get_inner_text")]
		public unowned string get_inner_text ();
		[CCode (cname = "webkit_dom_html_element_get_is_content_editable")]
		public bool get_is_content_editable ();
		[CCode (cname = "webkit_dom_html_element_get_lang")]
		public unowned string get_lang ();
		[CCode (cname = "webkit_dom_html_element_get_outer_html")]
		public unowned string get_outer_html ();
		[CCode (cname = "webkit_dom_html_element_get_outer_text")]
		public unowned string get_outer_text ();
		[CCode (cname = "webkit_dom_html_element_get_spellcheck")]
		public bool get_spellcheck ();
		[CCode (cname = "webkit_dom_html_element_get_tab_index")]
		public long get_tab_index ();
		[CCode (cname = "webkit_dom_html_element_get_title")]
		public unowned string get_title ();
		[CCode (cname = "webkit_dom_html_element_get_webkitdropzone")]
		public unowned string get_webkitdropzone ();
		[CCode (cname = "webkit_dom_html_element_insert_adjacent_element")]
		public unowned WebKit.DOMElement insert_adjacent_element (string where, WebKit.DOMElement element) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_element_insert_adjacent_html")]
		public void insert_adjacent_html (string where, string html) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_element_insert_adjacent_text")]
		public void insert_adjacent_text (string where, string text) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_element_set_class_name")]
		public void set_class_name (string value);
		[CCode (cname = "webkit_dom_html_element_set_content_editable")]
		public void set_content_editable (string value) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_element_set_dir")]
		public void set_dir (string value);
		[CCode (cname = "webkit_dom_html_element_set_draggable")]
		public void set_draggable (bool value);
		[CCode (cname = "webkit_dom_html_element_set_hidden")]
		public void set_hidden (bool value);
		[CCode (cname = "webkit_dom_html_element_set_id")]
		public void set_id (string value);
		[CCode (cname = "webkit_dom_html_element_set_inner_html")]
		public void set_inner_html (string value) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_element_set_inner_text")]
		public void set_inner_text (string value) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_element_set_lang")]
		public void set_lang (string value);
		[CCode (cname = "webkit_dom_html_element_set_outer_html")]
		public void set_outer_html (string value) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_element_set_outer_text")]
		public void set_outer_text (string value) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_element_set_spellcheck")]
		public void set_spellcheck (bool value);
		[CCode (cname = "webkit_dom_html_element_set_tab_index")]
		public void set_tab_index (long value);
		[CCode (cname = "webkit_dom_html_element_set_title")]
		public void set_title (string value);
		[CCode (cname = "webkit_dom_html_element_set_webkitdropzone")]
		public void set_webkitdropzone (string value);
		public WebKit.DOMHTMLCollection children { get; }
		public WebKit.DOMDOMTokenList class_list { get; }
		public string class_name { get; set; }
		public string content_editable { get; set; }
		public string dir { get; set; }
		public bool draggable { get; set; }
		public bool hidden { get; set; }
		public string id { get; set; }
		public string inner_html { get; set; }
		public string inner_text { get; set; }
		public bool is_content_editable { get; }
		public string lang { get; set; }
		public string outer_html { get; set; }
		public string outer_text { get; set; }
		public bool spellcheck { get; set; }
		public long tab_index { get; set; }
		public string title { get; set; }
		public string webkitdropzone { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLEmbedElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLEmbedElement ();
		[CCode (cname = "webkit_dom_html_embed_element_get_align")]
		public unowned string get_align ();
		[CCode (cname = "webkit_dom_html_embed_element_get_height")]
		public long get_height ();
		[CCode (cname = "webkit_dom_html_embed_element_get_name")]
		public unowned string get_name ();
		[CCode (cname = "webkit_dom_html_embed_element_get_src")]
		public unowned string get_src ();
		[CCode (cname = "webkit_dom_html_embed_element_get_width")]
		public long get_width ();
		[CCode (cname = "webkit_dom_html_embed_element_set_align")]
		public void set_align (string value);
		[CCode (cname = "webkit_dom_html_embed_element_set_height")]
		public void set_height (long value);
		[CCode (cname = "webkit_dom_html_embed_element_set_name")]
		public void set_name (string value);
		[CCode (cname = "webkit_dom_html_embed_element_set_src")]
		public void set_src (string value);
		[CCode (cname = "webkit_dom_html_embed_element_set_width")]
		public void set_width (long value);
		public string align { get; set; }
		public long height { get; set; }
		public string name { get; set; }
		public string src { get; set; }
		[NoAccessorMethod]
		public string type { owned get; set; }
		public long width { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLFieldSetElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLFieldSetElement ();
		[CCode (cname = "webkit_dom_html_field_set_element_check_validity")]
		public bool check_validity ();
		[CCode (cname = "webkit_dom_html_field_set_element_get_form")]
		public unowned WebKit.DOMHTMLFormElement get_form ();
		[CCode (cname = "webkit_dom_html_field_set_element_get_validation_message")]
		public unowned string get_validation_message ();
		[CCode (cname = "webkit_dom_html_field_set_element_get_validity")]
		public unowned WebKit.DOMValidityState get_validity ();
		[CCode (cname = "webkit_dom_html_field_set_element_get_will_validate")]
		public bool get_will_validate ();
		[CCode (cname = "webkit_dom_html_field_set_element_set_custom_validity")]
		public void set_custom_validity (string error);
		public WebKit.DOMHTMLFormElement form { get; }
		public string validation_message { get; }
		public WebKit.DOMValidityState validity { get; }
		public bool will_validate { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLFontElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLFontElement ();
		[CCode (cname = "webkit_dom_html_font_element_get_color")]
		public unowned string get_color ();
		[CCode (cname = "webkit_dom_html_font_element_get_face")]
		public unowned string get_face ();
		[CCode (cname = "webkit_dom_html_font_element_get_size")]
		public unowned string get_size ();
		[CCode (cname = "webkit_dom_html_font_element_set_color")]
		public void set_color (string value);
		[CCode (cname = "webkit_dom_html_font_element_set_face")]
		public void set_face (string value);
		[CCode (cname = "webkit_dom_html_font_element_set_size")]
		public void set_size (string value);
		public string color { get; set; }
		public string face { get; set; }
		public string size { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLFormElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLFormElement ();
		[CCode (cname = "webkit_dom_html_form_element_check_validity")]
		public bool check_validity ();
		[CCode (cname = "webkit_dom_html_form_element_dispatch_form_change")]
		public void dispatch_form_change ();
		[CCode (cname = "webkit_dom_html_form_element_dispatch_form_input")]
		public void dispatch_form_input ();
		[CCode (cname = "webkit_dom_html_form_element_get_accept_charset")]
		public unowned string get_accept_charset ();
		[CCode (cname = "webkit_dom_html_form_element_get_action")]
		public unowned string get_action ();
		[CCode (cname = "webkit_dom_html_form_element_get_autocomplete")]
		public unowned string get_autocomplete ();
		[CCode (cname = "webkit_dom_html_form_element_get_elements")]
		public unowned WebKit.DOMHTMLCollection get_elements ();
		[CCode (cname = "webkit_dom_html_form_element_get_encoding")]
		public unowned string get_encoding ();
		[CCode (cname = "webkit_dom_html_form_element_get_enctype")]
		public unowned string get_enctype ();
		[CCode (cname = "webkit_dom_html_form_element_get_length")]
		public long get_length ();
		[CCode (cname = "webkit_dom_html_form_element_get_method")]
		public unowned string get_method ();
		[CCode (cname = "webkit_dom_html_form_element_get_name")]
		public unowned string get_name ();
		[CCode (cname = "webkit_dom_html_form_element_get_no_validate")]
		public bool get_no_validate ();
		[CCode (cname = "webkit_dom_html_form_element_get_target")]
		public unowned string get_target ();
		[CCode (cname = "webkit_dom_html_form_element_reset")]
		public void reset ();
		[CCode (cname = "webkit_dom_html_form_element_set_accept_charset")]
		public void set_accept_charset (string value);
		[CCode (cname = "webkit_dom_html_form_element_set_action")]
		public void set_action (string value);
		[CCode (cname = "webkit_dom_html_form_element_set_autocomplete")]
		public void set_autocomplete (string value);
		[CCode (cname = "webkit_dom_html_form_element_set_encoding")]
		public void set_encoding (string value);
		[CCode (cname = "webkit_dom_html_form_element_set_enctype")]
		public void set_enctype (string value);
		[CCode (cname = "webkit_dom_html_form_element_set_method")]
		public void set_method (string value);
		[CCode (cname = "webkit_dom_html_form_element_set_name")]
		public void set_name (string value);
		[CCode (cname = "webkit_dom_html_form_element_set_no_validate")]
		public void set_no_validate (bool value);
		[CCode (cname = "webkit_dom_html_form_element_set_target")]
		public void set_target (string value);
		[CCode (cname = "webkit_dom_html_form_element_submit")]
		public void submit ();
		public string accept_charset { get; set; }
		public string action { get; set; }
		public string autocomplete { get; set; }
		public WebKit.DOMHTMLCollection elements { get; }
		public string encoding { get; set; }
		public string enctype { get; set; }
		public long length { get; }
		public string method { get; set; }
		public string name { get; set; }
		public bool no_validate { get; set; }
		public string target { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLFrameElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLFrameElement ();
		[CCode (cname = "webkit_dom_html_frame_element_get_content_document")]
		public unowned WebKit.DOMDocument get_content_document ();
		[CCode (cname = "webkit_dom_html_frame_element_get_content_window")]
		public unowned WebKit.DOMDOMWindow get_content_window ();
		[CCode (cname = "webkit_dom_html_frame_element_get_frame_border")]
		public unowned string get_frame_border ();
		[CCode (cname = "webkit_dom_html_frame_element_get_height")]
		public long get_height ();
		[CCode (cname = "webkit_dom_html_frame_element_get_long_desc")]
		public unowned string get_long_desc ();
		[CCode (cname = "webkit_dom_html_frame_element_get_margin_height")]
		public unowned string get_margin_height ();
		[CCode (cname = "webkit_dom_html_frame_element_get_margin_width")]
		public unowned string get_margin_width ();
		[CCode (cname = "webkit_dom_html_frame_element_get_name")]
		public unowned string get_name ();
		[CCode (cname = "webkit_dom_html_frame_element_get_no_resize")]
		public bool get_no_resize ();
		[CCode (cname = "webkit_dom_html_frame_element_get_scrolling")]
		public unowned string get_scrolling ();
		[CCode (cname = "webkit_dom_html_frame_element_get_src")]
		public unowned string get_src ();
		[CCode (cname = "webkit_dom_html_frame_element_get_width")]
		public long get_width ();
		[CCode (cname = "webkit_dom_html_frame_element_set_frame_border")]
		public void set_frame_border (string value);
		[CCode (cname = "webkit_dom_html_frame_element_set_long_desc")]
		public void set_long_desc (string value);
		[CCode (cname = "webkit_dom_html_frame_element_set_margin_height")]
		public void set_margin_height (string value);
		[CCode (cname = "webkit_dom_html_frame_element_set_margin_width")]
		public void set_margin_width (string value);
		[CCode (cname = "webkit_dom_html_frame_element_set_name")]
		public void set_name (string value);
		[CCode (cname = "webkit_dom_html_frame_element_set_no_resize")]
		public void set_no_resize (bool value);
		[CCode (cname = "webkit_dom_html_frame_element_set_scrolling")]
		public void set_scrolling (string value);
		[CCode (cname = "webkit_dom_html_frame_element_set_src")]
		public void set_src (string value);
		public WebKit.DOMDocument content_document { get; }
		public WebKit.DOMDOMWindow content_window { get; }
		public string frame_border { get; set; }
		public long height { get; }
		public string long_desc { get; set; }
		public string margin_height { get; set; }
		public string margin_width { get; set; }
		public string name { get; set; }
		public bool no_resize { get; set; }
		public string scrolling { get; set; }
		public string src { get; set; }
		public long width { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLFrameSetElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLFrameSetElement ();
		[CCode (cname = "webkit_dom_html_frame_set_element_get_cols")]
		public unowned string get_cols ();
		[CCode (cname = "webkit_dom_html_frame_set_element_get_rows")]
		public unowned string get_rows ();
		[CCode (cname = "webkit_dom_html_frame_set_element_set_cols")]
		public void set_cols (string value);
		[CCode (cname = "webkit_dom_html_frame_set_element_set_rows")]
		public void set_rows (string value);
		public string cols { get; set; }
		public string rows { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLHRElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLHRElement ();
		[CCode (cname = "webkit_dom_htmlhr_element_get_align")]
		public unowned string get_align ();
		[CCode (cname = "webkit_dom_htmlhr_element_get_no_shade")]
		public bool get_no_shade ();
		[CCode (cname = "webkit_dom_htmlhr_element_get_size")]
		public unowned string get_size ();
		[CCode (cname = "webkit_dom_htmlhr_element_get_width")]
		public unowned string get_width ();
		[CCode (cname = "webkit_dom_htmlhr_element_set_align")]
		public void set_align (string value);
		[CCode (cname = "webkit_dom_htmlhr_element_set_no_shade")]
		public void set_no_shade (bool value);
		[CCode (cname = "webkit_dom_htmlhr_element_set_size")]
		public void set_size (string value);
		[CCode (cname = "webkit_dom_htmlhr_element_set_width")]
		public void set_width (string value);
		public string align { get; set; }
		public bool no_shade { get; set; }
		public string size { get; set; }
		public string width { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLHeadElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLHeadElement ();
		[CCode (cname = "webkit_dom_html_head_element_get_profile")]
		public unowned string get_profile ();
		[CCode (cname = "webkit_dom_html_head_element_set_profile")]
		public void set_profile (string value);
		public string profile { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLHeadingElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLHeadingElement ();
		[CCode (cname = "webkit_dom_html_heading_element_get_align")]
		public unowned string get_align ();
		[CCode (cname = "webkit_dom_html_heading_element_set_align")]
		public void set_align (string value);
		public string align { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLHtmlElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLHtmlElement ();
		[CCode (cname = "webkit_dom_html_html_element_get_manifest")]
		public unowned string get_manifest ();
		[CCode (cname = "webkit_dom_html_html_element_get_version")]
		public unowned string get_version ();
		[CCode (cname = "webkit_dom_html_html_element_set_manifest")]
		public void set_manifest (string value);
		[CCode (cname = "webkit_dom_html_html_element_set_version")]
		public void set_version (string value);
		public string manifest { get; set; }
		public string version { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLIFrameElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLIFrameElement ();
		[CCode (cname = "webkit_dom_html_iframe_element_get_align")]
		public unowned string get_align ();
		[CCode (cname = "webkit_dom_html_iframe_element_get_content_document")]
		public unowned WebKit.DOMDocument get_content_document ();
		[CCode (cname = "webkit_dom_html_iframe_element_get_content_window")]
		public unowned WebKit.DOMDOMWindow get_content_window ();
		[CCode (cname = "webkit_dom_html_iframe_element_get_frame_border")]
		public unowned string get_frame_border ();
		[CCode (cname = "webkit_dom_html_iframe_element_get_height")]
		public unowned string get_height ();
		[CCode (cname = "webkit_dom_html_iframe_element_get_long_desc")]
		public unowned string get_long_desc ();
		[CCode (cname = "webkit_dom_html_iframe_element_get_margin_height")]
		public unowned string get_margin_height ();
		[CCode (cname = "webkit_dom_html_iframe_element_get_margin_width")]
		public unowned string get_margin_width ();
		[CCode (cname = "webkit_dom_html_iframe_element_get_name")]
		public unowned string get_name ();
		[CCode (cname = "webkit_dom_html_iframe_element_get_sandbox")]
		public unowned string get_sandbox ();
		[CCode (cname = "webkit_dom_html_iframe_element_get_scrolling")]
		public unowned string get_scrolling ();
		[CCode (cname = "webkit_dom_html_iframe_element_get_src")]
		public unowned string get_src ();
		[CCode (cname = "webkit_dom_html_iframe_element_get_width")]
		public unowned string get_width ();
		[CCode (cname = "webkit_dom_html_iframe_element_set_align")]
		public void set_align (string value);
		[CCode (cname = "webkit_dom_html_iframe_element_set_frame_border")]
		public void set_frame_border (string value);
		[CCode (cname = "webkit_dom_html_iframe_element_set_height")]
		public void set_height (string value);
		[CCode (cname = "webkit_dom_html_iframe_element_set_long_desc")]
		public void set_long_desc (string value);
		[CCode (cname = "webkit_dom_html_iframe_element_set_margin_height")]
		public void set_margin_height (string value);
		[CCode (cname = "webkit_dom_html_iframe_element_set_margin_width")]
		public void set_margin_width (string value);
		[CCode (cname = "webkit_dom_html_iframe_element_set_name")]
		public void set_name (string value);
		[CCode (cname = "webkit_dom_html_iframe_element_set_sandbox")]
		public void set_sandbox (string value);
		[CCode (cname = "webkit_dom_html_iframe_element_set_scrolling")]
		public void set_scrolling (string value);
		[CCode (cname = "webkit_dom_html_iframe_element_set_src")]
		public void set_src (string value);
		[CCode (cname = "webkit_dom_html_iframe_element_set_width")]
		public void set_width (string value);
		public string align { get; set; }
		public WebKit.DOMDocument content_document { get; }
		public WebKit.DOMDOMWindow content_window { get; }
		public string frame_border { get; set; }
		public string height { get; set; }
		public string long_desc { get; set; }
		public string margin_height { get; set; }
		public string margin_width { get; set; }
		public string name { get; set; }
		public string sandbox { get; set; }
		public string scrolling { get; set; }
		public string src { get; set; }
		public string width { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLImageElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLImageElement ();
		[CCode (cname = "webkit_dom_html_image_element_get_align")]
		public unowned string get_align ();
		[CCode (cname = "webkit_dom_html_image_element_get_alt")]
		public unowned string get_alt ();
		[CCode (cname = "webkit_dom_html_image_element_get_border")]
		public unowned string get_border ();
		[CCode (cname = "webkit_dom_html_image_element_get_complete")]
		public bool get_complete ();
		[CCode (cname = "webkit_dom_html_image_element_get_cross_origin")]
		public unowned string get_cross_origin ();
		[CCode (cname = "webkit_dom_html_image_element_get_height")]
		public long get_height ();
		[CCode (cname = "webkit_dom_html_image_element_get_hspace")]
		public long get_hspace ();
		[CCode (cname = "webkit_dom_html_image_element_get_is_map")]
		public bool get_is_map ();
		[CCode (cname = "webkit_dom_html_image_element_get_long_desc")]
		public unowned string get_long_desc ();
		[CCode (cname = "webkit_dom_html_image_element_get_lowsrc")]
		public unowned string get_lowsrc ();
		[CCode (cname = "webkit_dom_html_image_element_get_name")]
		public unowned string get_name ();
		[CCode (cname = "webkit_dom_html_image_element_get_natural_height")]
		public long get_natural_height ();
		[CCode (cname = "webkit_dom_html_image_element_get_natural_width")]
		public long get_natural_width ();
		[CCode (cname = "webkit_dom_html_image_element_get_src")]
		public unowned string get_src ();
		[CCode (cname = "webkit_dom_html_image_element_get_use_map")]
		public unowned string get_use_map ();
		[CCode (cname = "webkit_dom_html_image_element_get_vspace")]
		public long get_vspace ();
		[CCode (cname = "webkit_dom_html_image_element_get_width")]
		public long get_width ();
		[CCode (cname = "webkit_dom_html_image_element_get_x")]
		public long get_x ();
		[CCode (cname = "webkit_dom_html_image_element_get_y")]
		public long get_y ();
		[CCode (cname = "webkit_dom_html_image_element_set_align")]
		public void set_align (string value);
		[CCode (cname = "webkit_dom_html_image_element_set_alt")]
		public void set_alt (string value);
		[CCode (cname = "webkit_dom_html_image_element_set_border")]
		public void set_border (string value);
		[CCode (cname = "webkit_dom_html_image_element_set_cross_origin")]
		public void set_cross_origin (string value);
		[CCode (cname = "webkit_dom_html_image_element_set_height")]
		public void set_height (long value);
		[CCode (cname = "webkit_dom_html_image_element_set_hspace")]
		public void set_hspace (long value);
		[CCode (cname = "webkit_dom_html_image_element_set_is_map")]
		public void set_is_map (bool value);
		[CCode (cname = "webkit_dom_html_image_element_set_long_desc")]
		public void set_long_desc (string value);
		[CCode (cname = "webkit_dom_html_image_element_set_lowsrc")]
		public void set_lowsrc (string value);
		[CCode (cname = "webkit_dom_html_image_element_set_name")]
		public void set_name (string value);
		[CCode (cname = "webkit_dom_html_image_element_set_src")]
		public void set_src (string value);
		[CCode (cname = "webkit_dom_html_image_element_set_use_map")]
		public void set_use_map (string value);
		[CCode (cname = "webkit_dom_html_image_element_set_vspace")]
		public void set_vspace (long value);
		[CCode (cname = "webkit_dom_html_image_element_set_width")]
		public void set_width (long value);
		public string align { get; set; }
		public string alt { get; set; }
		public string border { get; set; }
		public bool complete { get; }
		public string cross_origin { get; set; }
		public long height { get; set; }
		public long hspace { get; set; }
		public bool is_map { get; set; }
		public string long_desc { get; set; }
		public string lowsrc { get; set; }
		public string name { get; set; }
		public long natural_height { get; }
		public long natural_width { get; }
		public string src { get; set; }
		public string use_map { get; set; }
		public long vspace { get; set; }
		public long width { get; set; }
		public long x { get; }
		public long y { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLInputElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLInputElement ();
		[CCode (cname = "webkit_dom_html_input_element_check_validity")]
		public bool check_validity ();
		[CCode (cname = "webkit_dom_html_input_element_click")]
		public void click ();
		[CCode (cname = "webkit_dom_html_input_element_get_accept")]
		public unowned string get_accept ();
		[CCode (cname = "webkit_dom_html_input_element_get_access_key")]
		public unowned string get_access_key ();
		[CCode (cname = "webkit_dom_html_input_element_get_align")]
		public unowned string get_align ();
		[CCode (cname = "webkit_dom_html_input_element_get_alt")]
		public unowned string get_alt ();
		[CCode (cname = "webkit_dom_html_input_element_get_autocomplete")]
		public unowned string get_autocomplete ();
		[CCode (cname = "webkit_dom_html_input_element_get_autofocus")]
		public bool get_autofocus ();
		[CCode (cname = "webkit_dom_html_input_element_get_checked")]
		public bool get_checked ();
		[CCode (cname = "webkit_dom_html_input_element_get_default_checked")]
		public bool get_default_checked ();
		[CCode (cname = "webkit_dom_html_input_element_get_default_value")]
		public unowned string get_default_value ();
		[CCode (cname = "webkit_dom_html_input_element_get_disabled")]
		public bool get_disabled ();
		[CCode (cname = "webkit_dom_html_input_element_get_files")]
		public unowned WebKit.DOMFileList get_files ();
		[CCode (cname = "webkit_dom_html_input_element_get_form")]
		public unowned WebKit.DOMHTMLFormElement get_form ();
		[CCode (cname = "webkit_dom_html_input_element_get_form_action")]
		public unowned string get_form_action ();
		[CCode (cname = "webkit_dom_html_input_element_get_form_enctype")]
		public unowned string get_form_enctype ();
		[CCode (cname = "webkit_dom_html_input_element_get_form_method")]
		public unowned string get_form_method ();
		[CCode (cname = "webkit_dom_html_input_element_get_form_no_validate")]
		public bool get_form_no_validate ();
		[CCode (cname = "webkit_dom_html_input_element_get_form_target")]
		public unowned string get_form_target ();
		[CCode (cname = "webkit_dom_html_input_element_get_incremental")]
		public bool get_incremental ();
		[CCode (cname = "webkit_dom_html_input_element_get_indeterminate")]
		public bool get_indeterminate ();
		[CCode (cname = "webkit_dom_html_input_element_get_labels")]
		public unowned WebKit.DOMNodeList get_labels ();
		[CCode (cname = "webkit_dom_html_input_element_get_list")]
		public unowned WebKit.DOMHTMLElement get_list ();
		[CCode (cname = "webkit_dom_html_input_element_get_max")]
		public unowned string get_max ();
		[CCode (cname = "webkit_dom_html_input_element_get_max_length")]
		public long get_max_length ();
		[CCode (cname = "webkit_dom_html_input_element_get_min")]
		public unowned string get_min ();
		[CCode (cname = "webkit_dom_html_input_element_get_multiple")]
		public bool get_multiple ();
		[CCode (cname = "webkit_dom_html_input_element_get_name")]
		public unowned string get_name ();
		[CCode (cname = "webkit_dom_html_input_element_get_pattern")]
		public unowned string get_pattern ();
		[CCode (cname = "webkit_dom_html_input_element_get_placeholder")]
		public unowned string get_placeholder ();
		[CCode (cname = "webkit_dom_html_input_element_get_read_only")]
		public bool get_read_only ();
		[CCode (cname = "webkit_dom_html_input_element_get_required")]
		public bool get_required ();
		[CCode (cname = "webkit_dom_html_input_element_get_selected_option")]
		public unowned WebKit.DOMHTMLOptionElement get_selected_option ();
		[CCode (cname = "webkit_dom_html_input_element_get_size")]
		public ulong get_size ();
		[CCode (cname = "webkit_dom_html_input_element_get_src")]
		public unowned string get_src ();
		[CCode (cname = "webkit_dom_html_input_element_get_step")]
		public unowned string get_step ();
		[CCode (cname = "webkit_dom_html_input_element_get_use_map")]
		public unowned string get_use_map ();
		[CCode (cname = "webkit_dom_html_input_element_get_validation_message")]
		public unowned string get_validation_message ();
		[CCode (cname = "webkit_dom_html_input_element_get_validity")]
		public unowned WebKit.DOMValidityState get_validity ();
		[CCode (cname = "webkit_dom_html_input_element_get_value")]
		public unowned string get_value ();
		[CCode (cname = "webkit_dom_html_input_element_get_value_as_number")]
		public double get_value_as_number ();
		[CCode (cname = "webkit_dom_html_input_element_get_webkit_grammar")]
		public bool get_webkit_grammar ();
		[CCode (cname = "webkit_dom_html_input_element_get_webkit_speech")]
		public bool get_webkit_speech ();
		[CCode (cname = "webkit_dom_html_input_element_get_webkitdirectory")]
		public bool get_webkitdirectory ();
		[CCode (cname = "webkit_dom_html_input_element_get_will_validate")]
		public bool get_will_validate ();
		[CCode (cname = "webkit_dom_html_input_element_is_edited")]
		public bool is_edited ();
		[CCode (cname = "webkit_dom_html_input_element_select")]
		public void select ();
		[CCode (cname = "webkit_dom_html_input_element_set_accept")]
		public void set_accept (string value);
		[CCode (cname = "webkit_dom_html_input_element_set_access_key")]
		public void set_access_key (string value);
		[CCode (cname = "webkit_dom_html_input_element_set_align")]
		public void set_align (string value);
		[CCode (cname = "webkit_dom_html_input_element_set_alt")]
		public void set_alt (string value);
		[CCode (cname = "webkit_dom_html_input_element_set_autocomplete")]
		public void set_autocomplete (string value);
		[CCode (cname = "webkit_dom_html_input_element_set_autofocus")]
		public void set_autofocus (bool value);
		[CCode (cname = "webkit_dom_html_input_element_set_checked")]
		public void set_checked (bool value);
		[CCode (cname = "webkit_dom_html_input_element_set_custom_validity")]
		public void set_custom_validity (string error);
		[CCode (cname = "webkit_dom_html_input_element_set_default_checked")]
		public void set_default_checked (bool value);
		[CCode (cname = "webkit_dom_html_input_element_set_default_value")]
		public void set_default_value (string value);
		[CCode (cname = "webkit_dom_html_input_element_set_disabled")]
		public void set_disabled (bool value);
		[CCode (cname = "webkit_dom_html_input_element_set_form_action")]
		public void set_form_action (string value);
		[CCode (cname = "webkit_dom_html_input_element_set_form_enctype")]
		public void set_form_enctype (string value);
		[CCode (cname = "webkit_dom_html_input_element_set_form_method")]
		public void set_form_method (string value);
		[CCode (cname = "webkit_dom_html_input_element_set_form_no_validate")]
		public void set_form_no_validate (bool value);
		[CCode (cname = "webkit_dom_html_input_element_set_form_target")]
		public void set_form_target (string value);
		[CCode (cname = "webkit_dom_html_input_element_set_incremental")]
		public void set_incremental (bool value);
		[CCode (cname = "webkit_dom_html_input_element_set_indeterminate")]
		public void set_indeterminate (bool value);
		[CCode (cname = "webkit_dom_html_input_element_set_max")]
		public void set_max (string value);
		[CCode (cname = "webkit_dom_html_input_element_set_max_length")]
		public void set_max_length (long value) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_input_element_set_min")]
		public void set_min (string value);
		[CCode (cname = "webkit_dom_html_input_element_set_multiple")]
		public void set_multiple (bool value);
		[CCode (cname = "webkit_dom_html_input_element_set_name")]
		public void set_name (string value);
		[CCode (cname = "webkit_dom_html_input_element_set_pattern")]
		public void set_pattern (string value);
		[CCode (cname = "webkit_dom_html_input_element_set_placeholder")]
		public void set_placeholder (string value);
		[CCode (cname = "webkit_dom_html_input_element_set_read_only")]
		public void set_read_only (bool value);
		[CCode (cname = "webkit_dom_html_input_element_set_required")]
		public void set_required (bool value);
		[CCode (cname = "webkit_dom_html_input_element_set_size")]
		public void set_size (ulong value);
		[CCode (cname = "webkit_dom_html_input_element_set_src")]
		public void set_src (string value);
		[CCode (cname = "webkit_dom_html_input_element_set_step")]
		public void set_step (string value);
		[CCode (cname = "webkit_dom_html_input_element_set_use_map")]
		public void set_use_map (string value);
		[CCode (cname = "webkit_dom_html_input_element_set_value")]
		public void set_value (string value);
		[CCode (cname = "webkit_dom_html_input_element_set_value_as_number")]
		public void set_value_as_number (double value) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_input_element_set_value_for_user")]
		public void set_value_for_user (string value);
		[CCode (cname = "webkit_dom_html_input_element_set_webkit_grammar")]
		public void set_webkit_grammar (bool value);
		[CCode (cname = "webkit_dom_html_input_element_set_webkit_speech")]
		public void set_webkit_speech (bool value);
		[CCode (cname = "webkit_dom_html_input_element_set_webkitdirectory")]
		public void set_webkitdirectory (bool value);
		[CCode (cname = "webkit_dom_html_input_element_step_down")]
		public void step_down (long n) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_input_element_step_up")]
		public void step_up (long n) throws GLib.Error;
		public string accept { get; set; }
		public string access_key { get; set; }
		public string align { get; set; }
		public string alt { get; set; }
		public string autocomplete { get; set; }
		public bool autofocus { get; set; }
		public bool checked { get; set; }
		public bool default_checked { get; set; }
		public string default_value { get; set; }
		public bool disabled { get; set; }
		public WebKit.DOMFileList files { get; }
		public WebKit.DOMHTMLFormElement form { get; }
		public string form_action { get; set; }
		public string form_enctype { get; set; }
		public string form_method { get; set; }
		public bool form_no_validate { get; set; }
		public string form_target { get; set; }
		public bool incremental { get; set; }
		public bool indeterminate { get; set; }
		public WebKit.DOMNodeList labels { get; }
		public WebKit.DOMHTMLElement list { get; }
		public string max { get; set; }
		public long max_length { get; set; }
		public string min { get; set; }
		public bool multiple { get; set; }
		public string name { get; set; }
		public string pattern { get; set; }
		public string placeholder { get; set; }
		public bool read_only { get; set; }
		public bool required { get; set; }
		public WebKit.DOMHTMLOptionElement selected_option { get; }
		public ulong size { get; set; }
		public string src { get; set; }
		public string step { get; set; }
		[NoAccessorMethod]
		public string type { owned get; set; }
		public string use_map { get; set; }
		public string validation_message { get; }
		public WebKit.DOMValidityState validity { get; }
		public string value { get; set; }
		public double value_as_number { get; set; }
		public bool will_validate { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLIsIndexElement : WebKit.DOMHTMLInputElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLIsIndexElement ();
		[CCode (cname = "webkit_dom_html_is_index_element_get_form")]
		public unowned WebKit.DOMHTMLFormElement get_form ();
		[CCode (cname = "webkit_dom_html_is_index_element_get_prompt")]
		public unowned string get_prompt ();
		[CCode (cname = "webkit_dom_html_is_index_element_set_prompt")]
		public void set_prompt (string value);
		public WebKit.DOMHTMLFormElement form { get; }
		public string prompt { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLKeygenElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLKeygenElement ();
		[CCode (cname = "webkit_dom_html_keygen_element_check_validity")]
		public bool check_validity ();
		[CCode (cname = "webkit_dom_html_keygen_element_get_autofocus")]
		public bool get_autofocus ();
		[CCode (cname = "webkit_dom_html_keygen_element_get_challenge")]
		public unowned string get_challenge ();
		[CCode (cname = "webkit_dom_html_keygen_element_get_disabled")]
		public bool get_disabled ();
		[CCode (cname = "webkit_dom_html_keygen_element_get_form")]
		public unowned WebKit.DOMHTMLFormElement get_form ();
		[CCode (cname = "webkit_dom_html_keygen_element_get_keytype")]
		public unowned string get_keytype ();
		[CCode (cname = "webkit_dom_html_keygen_element_get_labels")]
		public unowned WebKit.DOMNodeList get_labels ();
		[CCode (cname = "webkit_dom_html_keygen_element_get_name")]
		public unowned string get_name ();
		[CCode (cname = "webkit_dom_html_keygen_element_get_validation_message")]
		public unowned string get_validation_message ();
		[CCode (cname = "webkit_dom_html_keygen_element_get_validity")]
		public unowned WebKit.DOMValidityState get_validity ();
		[CCode (cname = "webkit_dom_html_keygen_element_get_will_validate")]
		public bool get_will_validate ();
		[CCode (cname = "webkit_dom_html_keygen_element_set_autofocus")]
		public void set_autofocus (bool value);
		[CCode (cname = "webkit_dom_html_keygen_element_set_challenge")]
		public void set_challenge (string value);
		[CCode (cname = "webkit_dom_html_keygen_element_set_custom_validity")]
		public void set_custom_validity (string error);
		[CCode (cname = "webkit_dom_html_keygen_element_set_disabled")]
		public void set_disabled (bool value);
		[CCode (cname = "webkit_dom_html_keygen_element_set_keytype")]
		public void set_keytype (string value);
		[CCode (cname = "webkit_dom_html_keygen_element_set_name")]
		public void set_name (string value);
		public bool autofocus { get; set; }
		public string challenge { get; set; }
		public bool disabled { get; set; }
		public WebKit.DOMHTMLFormElement form { get; }
		public string keytype { get; set; }
		public WebKit.DOMNodeList labels { get; }
		public string name { get; set; }
		[NoAccessorMethod]
		public string type { owned get; }
		public string validation_message { get; }
		public WebKit.DOMValidityState validity { get; }
		public bool will_validate { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLLIElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLLIElement ();
		[CCode (cname = "webkit_dom_htmlli_element_get_value")]
		public long get_value ();
		[CCode (cname = "webkit_dom_htmlli_element_set_value")]
		public void set_value (long value);
		[NoAccessorMethod]
		public string type { owned get; set; }
		public long value { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLLabelElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLLabelElement ();
		[CCode (cname = "webkit_dom_html_label_element_get_access_key")]
		public unowned string get_access_key ();
		[CCode (cname = "webkit_dom_html_label_element_get_control")]
		public unowned WebKit.DOMHTMLElement get_control ();
		[CCode (cname = "webkit_dom_html_label_element_get_form")]
		public unowned WebKit.DOMHTMLFormElement get_form ();
		[CCode (cname = "webkit_dom_html_label_element_get_html_for")]
		public unowned string get_html_for ();
		[CCode (cname = "webkit_dom_html_label_element_set_access_key")]
		public void set_access_key (string value);
		[CCode (cname = "webkit_dom_html_label_element_set_html_for")]
		public void set_html_for (string value);
		public string access_key { get; set; }
		public WebKit.DOMHTMLElement control { get; }
		public WebKit.DOMHTMLFormElement form { get; }
		public string html_for { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLLegendElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLLegendElement ();
		[CCode (cname = "webkit_dom_html_legend_element_get_access_key")]
		public unowned string get_access_key ();
		[CCode (cname = "webkit_dom_html_legend_element_get_align")]
		public unowned string get_align ();
		[CCode (cname = "webkit_dom_html_legend_element_get_form")]
		public unowned WebKit.DOMHTMLFormElement get_form ();
		[CCode (cname = "webkit_dom_html_legend_element_set_access_key")]
		public void set_access_key (string value);
		[CCode (cname = "webkit_dom_html_legend_element_set_align")]
		public void set_align (string value);
		public string access_key { get; set; }
		public string align { get; set; }
		public WebKit.DOMHTMLFormElement form { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLLinkElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLLinkElement ();
		[CCode (cname = "webkit_dom_html_link_element_get_charset")]
		public unowned string get_charset ();
		[CCode (cname = "webkit_dom_html_link_element_get_disabled")]
		public bool get_disabled ();
		[CCode (cname = "webkit_dom_html_link_element_get_href")]
		public unowned string get_href ();
		[CCode (cname = "webkit_dom_html_link_element_get_hreflang")]
		public unowned string get_hreflang ();
		[CCode (cname = "webkit_dom_html_link_element_get_media")]
		public unowned string get_media ();
		[CCode (cname = "webkit_dom_html_link_element_get_rel")]
		public unowned string get_rel ();
		[CCode (cname = "webkit_dom_html_link_element_get_rev")]
		public unowned string get_rev ();
		[CCode (cname = "webkit_dom_html_link_element_get_sheet")]
		public unowned WebKit.DOMStyleSheet get_sheet ();
		[CCode (cname = "webkit_dom_html_link_element_get_target")]
		public unowned string get_target ();
		[CCode (cname = "webkit_dom_html_link_element_set_charset")]
		public void set_charset (string value);
		[CCode (cname = "webkit_dom_html_link_element_set_disabled")]
		public void set_disabled (bool value);
		[CCode (cname = "webkit_dom_html_link_element_set_href")]
		public void set_href (string value);
		[CCode (cname = "webkit_dom_html_link_element_set_hreflang")]
		public void set_hreflang (string value);
		[CCode (cname = "webkit_dom_html_link_element_set_media")]
		public void set_media (string value);
		[CCode (cname = "webkit_dom_html_link_element_set_rel")]
		public void set_rel (string value);
		[CCode (cname = "webkit_dom_html_link_element_set_rev")]
		public void set_rev (string value);
		[CCode (cname = "webkit_dom_html_link_element_set_target")]
		public void set_target (string value);
		public string charset { get; set; }
		public bool disabled { get; set; }
		public string href { get; set; }
		public string hreflang { get; set; }
		public string media { get; set; }
		public string rel { get; set; }
		public string rev { get; set; }
		public WebKit.DOMStyleSheet sheet { get; }
		public string target { get; set; }
		[NoAccessorMethod]
		public string type { owned get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLMapElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLMapElement ();
		[CCode (cname = "webkit_dom_html_map_element_get_areas")]
		public unowned WebKit.DOMHTMLCollection get_areas ();
		[CCode (cname = "webkit_dom_html_map_element_get_name")]
		public unowned string get_name ();
		[CCode (cname = "webkit_dom_html_map_element_set_name")]
		public void set_name (string value);
		public WebKit.DOMHTMLCollection areas { get; }
		public string name { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLMarqueeElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLMarqueeElement ();
		[CCode (cname = "webkit_dom_html_marquee_element_get_behavior")]
		public unowned string get_behavior ();
		[CCode (cname = "webkit_dom_html_marquee_element_get_bg_color")]
		public unowned string get_bg_color ();
		[CCode (cname = "webkit_dom_html_marquee_element_get_direction")]
		public unowned string get_direction ();
		[CCode (cname = "webkit_dom_html_marquee_element_get_height")]
		public unowned string get_height ();
		[CCode (cname = "webkit_dom_html_marquee_element_get_hspace")]
		public ulong get_hspace ();
		[CCode (cname = "webkit_dom_html_marquee_element_get_loop")]
		public long get_loop ();
		[CCode (cname = "webkit_dom_html_marquee_element_get_scroll_amount")]
		public long get_scroll_amount ();
		[CCode (cname = "webkit_dom_html_marquee_element_get_scroll_delay")]
		public long get_scroll_delay ();
		[CCode (cname = "webkit_dom_html_marquee_element_get_true_speed")]
		public bool get_true_speed ();
		[CCode (cname = "webkit_dom_html_marquee_element_get_vspace")]
		public ulong get_vspace ();
		[CCode (cname = "webkit_dom_html_marquee_element_get_width")]
		public unowned string get_width ();
		[CCode (cname = "webkit_dom_html_marquee_element_set_behavior")]
		public void set_behavior (string value);
		[CCode (cname = "webkit_dom_html_marquee_element_set_bg_color")]
		public void set_bg_color (string value);
		[CCode (cname = "webkit_dom_html_marquee_element_set_direction")]
		public void set_direction (string value);
		[CCode (cname = "webkit_dom_html_marquee_element_set_height")]
		public void set_height (string value);
		[CCode (cname = "webkit_dom_html_marquee_element_set_hspace")]
		public void set_hspace (ulong value);
		[CCode (cname = "webkit_dom_html_marquee_element_set_loop")]
		public void set_loop (long value) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_marquee_element_set_scroll_amount")]
		public void set_scroll_amount (long value) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_marquee_element_set_scroll_delay")]
		public void set_scroll_delay (long value) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_marquee_element_set_true_speed")]
		public void set_true_speed (bool value);
		[CCode (cname = "webkit_dom_html_marquee_element_set_vspace")]
		public void set_vspace (ulong value);
		[CCode (cname = "webkit_dom_html_marquee_element_set_width")]
		public void set_width (string value);
		[CCode (cname = "webkit_dom_html_marquee_element_start")]
		public void start ();
		[CCode (cname = "webkit_dom_html_marquee_element_stop")]
		public void stop ();
		public string behavior { get; set; }
		public string bg_color { get; set; }
		public string direction { get; set; }
		public string height { get; set; }
		public ulong hspace { get; set; }
		public long loop { get; set; }
		public long scroll_amount { get; set; }
		public long scroll_delay { get; set; }
		public bool true_speed { get; set; }
		public ulong vspace { get; set; }
		public string width { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLMediaElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLMediaElement ();
		[CCode (cname = "webkit_dom_html_media_element_can_play_type")]
		public unowned string can_play_type (string type);
		[CCode (cname = "webkit_dom_html_media_element_get_autoplay")]
		public bool get_autoplay ();
		[CCode (cname = "webkit_dom_html_media_element_get_buffered")]
		public unowned WebKit.DOMTimeRanges get_buffered ();
		[CCode (cname = "webkit_dom_html_media_element_get_controls")]
		public bool get_controls ();
		[CCode (cname = "webkit_dom_html_media_element_get_current_src")]
		public unowned string get_current_src ();
		[CCode (cname = "webkit_dom_html_media_element_get_current_time")]
		public float get_current_time ();
		[CCode (cname = "webkit_dom_html_media_element_get_default_muted")]
		public bool get_default_muted ();
		[CCode (cname = "webkit_dom_html_media_element_get_default_playback_rate")]
		public float get_default_playback_rate ();
		[CCode (cname = "webkit_dom_html_media_element_get_duration")]
		public float get_duration ();
		[CCode (cname = "webkit_dom_html_media_element_get_ended")]
		public bool get_ended ();
		[CCode (cname = "webkit_dom_html_media_element_get_error")]
		public unowned WebKit.DOMMediaError get_error ();
		[CCode (cname = "webkit_dom_html_media_element_get_initial_time")]
		public double get_initial_time ();
		[CCode (cname = "webkit_dom_html_media_element_get_loop")]
		public bool get_loop ();
		[CCode (cname = "webkit_dom_html_media_element_get_muted")]
		public bool get_muted ();
		[CCode (cname = "webkit_dom_html_media_element_get_network_state")]
		public ushort get_network_state ();
		[CCode (cname = "webkit_dom_html_media_element_get_paused")]
		public bool get_paused ();
		[CCode (cname = "webkit_dom_html_media_element_get_playback_rate")]
		public float get_playback_rate ();
		[CCode (cname = "webkit_dom_html_media_element_get_played")]
		public unowned WebKit.DOMTimeRanges get_played ();
		[CCode (cname = "webkit_dom_html_media_element_get_preload")]
		public unowned string get_preload ();
		[CCode (cname = "webkit_dom_html_media_element_get_ready_state")]
		public ushort get_ready_state ();
		[CCode (cname = "webkit_dom_html_media_element_get_seekable")]
		public unowned WebKit.DOMTimeRanges get_seekable ();
		[CCode (cname = "webkit_dom_html_media_element_get_seeking")]
		public bool get_seeking ();
		[CCode (cname = "webkit_dom_html_media_element_get_src")]
		public unowned string get_src ();
		[CCode (cname = "webkit_dom_html_media_element_get_start_time")]
		public float get_start_time ();
		[CCode (cname = "webkit_dom_html_media_element_get_volume")]
		public float get_volume ();
		[CCode (cname = "webkit_dom_html_media_element_get_webkit_audio_decoded_byte_count")]
		public ulong get_webkit_audio_decoded_byte_count ();
		[CCode (cname = "webkit_dom_html_media_element_get_webkit_closed_captions_visible")]
		public bool get_webkit_closed_captions_visible ();
		[CCode (cname = "webkit_dom_html_media_element_get_webkit_has_closed_captions")]
		public bool get_webkit_has_closed_captions ();
		[CCode (cname = "webkit_dom_html_media_element_get_webkit_preserves_pitch")]
		public bool get_webkit_preserves_pitch ();
		[CCode (cname = "webkit_dom_html_media_element_get_webkit_video_decoded_byte_count")]
		public ulong get_webkit_video_decoded_byte_count ();
		[CCode (cname = "webkit_dom_html_media_element_load")]
		public void load () throws GLib.Error;
		[CCode (cname = "webkit_dom_html_media_element_pause")]
		public void pause ();
		[CCode (cname = "webkit_dom_html_media_element_play")]
		public void play ();
		[CCode (cname = "webkit_dom_html_media_element_set_autoplay")]
		public void set_autoplay (bool value);
		[CCode (cname = "webkit_dom_html_media_element_set_controls")]
		public void set_controls (bool value);
		[CCode (cname = "webkit_dom_html_media_element_set_current_time")]
		public void set_current_time (float value) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_media_element_set_default_muted")]
		public void set_default_muted (bool value);
		[CCode (cname = "webkit_dom_html_media_element_set_default_playback_rate")]
		public void set_default_playback_rate (float value);
		[CCode (cname = "webkit_dom_html_media_element_set_loop")]
		public void set_loop (bool value);
		[CCode (cname = "webkit_dom_html_media_element_set_muted")]
		public void set_muted (bool value);
		[CCode (cname = "webkit_dom_html_media_element_set_playback_rate")]
		public void set_playback_rate (float value);
		[CCode (cname = "webkit_dom_html_media_element_set_preload")]
		public void set_preload (string value);
		[CCode (cname = "webkit_dom_html_media_element_set_src")]
		public void set_src (string value);
		[CCode (cname = "webkit_dom_html_media_element_set_volume")]
		public void set_volume (float value) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_media_element_set_webkit_closed_captions_visible")]
		public void set_webkit_closed_captions_visible (bool value);
		[CCode (cname = "webkit_dom_html_media_element_set_webkit_preserves_pitch")]
		public void set_webkit_preserves_pitch (bool value);
		public bool autoplay { get; set; }
		public WebKit.DOMTimeRanges buffered { get; }
		public bool controls { get; set; }
		public string current_src { get; }
		public float current_time { get; set; }
		public bool default_muted { get; set; }
		public float default_playback_rate { get; set; }
		public float duration { get; }
		public bool ended { get; }
		public WebKit.DOMMediaError error { get; }
		public double initial_time { get; }
		public bool loop { get; set; }
		public bool muted { get; set; }
		public uint network_state { get; }
		public bool paused { get; }
		public float playback_rate { get; set; }
		public WebKit.DOMTimeRanges played { get; }
		public string preload { get; set; }
		public uint ready_state { get; }
		public WebKit.DOMTimeRanges seekable { get; }
		public bool seeking { get; }
		public string src { get; set; }
		public float start_time { get; }
		public float volume { get; set; }
		public bool webkit_closed_captions_visible { get; set; }
		public bool webkit_has_closed_captions { get; }
		public bool webkit_preserves_pitch { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLMenuElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLMenuElement ();
		[CCode (cname = "webkit_dom_html_menu_element_get_compact")]
		public bool get_compact ();
		[CCode (cname = "webkit_dom_html_menu_element_set_compact")]
		public void set_compact (bool value);
		public bool compact { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLMetaElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLMetaElement ();
		[CCode (cname = "webkit_dom_html_meta_element_get_content")]
		public unowned string get_content ();
		[CCode (cname = "webkit_dom_html_meta_element_get_http_equiv")]
		public unowned string get_http_equiv ();
		[CCode (cname = "webkit_dom_html_meta_element_get_name")]
		public unowned string get_name ();
		[CCode (cname = "webkit_dom_html_meta_element_get_scheme")]
		public unowned string get_scheme ();
		[CCode (cname = "webkit_dom_html_meta_element_set_content")]
		public void set_content (string value);
		[CCode (cname = "webkit_dom_html_meta_element_set_http_equiv")]
		public void set_http_equiv (string value);
		[CCode (cname = "webkit_dom_html_meta_element_set_name")]
		public void set_name (string value);
		[CCode (cname = "webkit_dom_html_meta_element_set_scheme")]
		public void set_scheme (string value);
		public string content { get; set; }
		public string http_equiv { get; set; }
		public string name { get; set; }
		public string scheme { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLModElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLModElement ();
		[CCode (cname = "webkit_dom_html_mod_element_get_cite")]
		public unowned string get_cite ();
		[CCode (cname = "webkit_dom_html_mod_element_get_date_time")]
		public unowned string get_date_time ();
		[CCode (cname = "webkit_dom_html_mod_element_set_cite")]
		public void set_cite (string value);
		[CCode (cname = "webkit_dom_html_mod_element_set_date_time")]
		public void set_date_time (string value);
		public string cite { get; set; }
		public string date_time { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLOListElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLOListElement ();
		[CCode (cname = "webkit_dom_htmlo_list_element_get_compact")]
		public bool get_compact ();
		[CCode (cname = "webkit_dom_htmlo_list_element_get_start")]
		public long get_start ();
		[CCode (cname = "webkit_dom_htmlo_list_element_set_compact")]
		public void set_compact (bool value);
		[CCode (cname = "webkit_dom_htmlo_list_element_set_start")]
		public void set_start (long value);
		public bool compact { get; set; }
		public long start { get; set; }
		[NoAccessorMethod]
		public string type { owned get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLObjectElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLObjectElement ();
		[CCode (cname = "webkit_dom_html_object_element_check_validity")]
		public bool check_validity ();
		[CCode (cname = "webkit_dom_html_object_element_get_align")]
		public unowned string get_align ();
		[CCode (cname = "webkit_dom_html_object_element_get_archive")]
		public unowned string get_archive ();
		[CCode (cname = "webkit_dom_html_object_element_get_border")]
		public unowned string get_border ();
		[CCode (cname = "webkit_dom_html_object_element_get_code")]
		public unowned string get_code ();
		[CCode (cname = "webkit_dom_html_object_element_get_code_base")]
		public unowned string get_code_base ();
		[CCode (cname = "webkit_dom_html_object_element_get_code_type")]
		public unowned string get_code_type ();
		[CCode (cname = "webkit_dom_html_object_element_get_content_document")]
		public unowned WebKit.DOMDocument get_content_document ();
		[CCode (cname = "webkit_dom_html_object_element_get_data")]
		public unowned string get_data ();
		[CCode (cname = "webkit_dom_html_object_element_get_declare")]
		public bool get_declare ();
		[CCode (cname = "webkit_dom_html_object_element_get_form")]
		public unowned WebKit.DOMHTMLFormElement get_form ();
		[CCode (cname = "webkit_dom_html_object_element_get_height")]
		public unowned string get_height ();
		[CCode (cname = "webkit_dom_html_object_element_get_hspace")]
		public long get_hspace ();
		[CCode (cname = "webkit_dom_html_object_element_get_name")]
		public unowned string get_name ();
		[CCode (cname = "webkit_dom_html_object_element_get_standby")]
		public unowned string get_standby ();
		[CCode (cname = "webkit_dom_html_object_element_get_use_map")]
		public unowned string get_use_map ();
		[CCode (cname = "webkit_dom_html_object_element_get_validation_message")]
		public unowned string get_validation_message ();
		[CCode (cname = "webkit_dom_html_object_element_get_validity")]
		public unowned WebKit.DOMValidityState get_validity ();
		[CCode (cname = "webkit_dom_html_object_element_get_vspace")]
		public long get_vspace ();
		[CCode (cname = "webkit_dom_html_object_element_get_width")]
		public unowned string get_width ();
		[CCode (cname = "webkit_dom_html_object_element_get_will_validate")]
		public bool get_will_validate ();
		[CCode (cname = "webkit_dom_html_object_element_set_align")]
		public void set_align (string value);
		[CCode (cname = "webkit_dom_html_object_element_set_archive")]
		public void set_archive (string value);
		[CCode (cname = "webkit_dom_html_object_element_set_border")]
		public void set_border (string value);
		[CCode (cname = "webkit_dom_html_object_element_set_code")]
		public void set_code (string value);
		[CCode (cname = "webkit_dom_html_object_element_set_code_base")]
		public void set_code_base (string value);
		[CCode (cname = "webkit_dom_html_object_element_set_code_type")]
		public void set_code_type (string value);
		[CCode (cname = "webkit_dom_html_object_element_set_custom_validity")]
		public void set_custom_validity (string error);
		[CCode (cname = "webkit_dom_html_object_element_set_data")]
		public void set_data (string value);
		[CCode (cname = "webkit_dom_html_object_element_set_declare")]
		public void set_declare (bool value);
		[CCode (cname = "webkit_dom_html_object_element_set_height")]
		public void set_height (string value);
		[CCode (cname = "webkit_dom_html_object_element_set_hspace")]
		public void set_hspace (long value);
		[CCode (cname = "webkit_dom_html_object_element_set_name")]
		public void set_name (string value);
		[CCode (cname = "webkit_dom_html_object_element_set_standby")]
		public void set_standby (string value);
		[CCode (cname = "webkit_dom_html_object_element_set_use_map")]
		public void set_use_map (string value);
		[CCode (cname = "webkit_dom_html_object_element_set_vspace")]
		public void set_vspace (long value);
		[CCode (cname = "webkit_dom_html_object_element_set_width")]
		public void set_width (string value);
		public string align { get; set; }
		public string archive { get; set; }
		public string border { get; set; }
		public string code { get; set; }
		public string code_base { get; set; }
		public string code_type { get; set; }
		public WebKit.DOMDocument content_document { get; }
		public string data { get; set; }
		public bool declare { get; set; }
		public WebKit.DOMHTMLFormElement form { get; }
		public string height { get; set; }
		public long hspace { get; set; }
		public string name { get; set; }
		public string standby { get; set; }
		[NoAccessorMethod]
		public string type { owned get; set; }
		public string use_map { get; set; }
		public string validation_message { get; }
		public WebKit.DOMValidityState validity { get; }
		public long vspace { get; set; }
		public string width { get; set; }
		public bool will_validate { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLOptGroupElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLOptGroupElement ();
		[CCode (cname = "webkit_dom_html_opt_group_element_get_disabled")]
		public bool get_disabled ();
		[CCode (cname = "webkit_dom_html_opt_group_element_get_label")]
		public unowned string get_label ();
		[CCode (cname = "webkit_dom_html_opt_group_element_set_disabled")]
		public void set_disabled (bool value);
		[CCode (cname = "webkit_dom_html_opt_group_element_set_label")]
		public void set_label (string value);
		public bool disabled { get; set; }
		public string label { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLOptionElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLOptionElement ();
		[CCode (cname = "webkit_dom_html_option_element_get_default_selected")]
		public bool get_default_selected ();
		[CCode (cname = "webkit_dom_html_option_element_get_disabled")]
		public bool get_disabled ();
		[CCode (cname = "webkit_dom_html_option_element_get_form")]
		public unowned WebKit.DOMHTMLFormElement get_form ();
		[CCode (cname = "webkit_dom_html_option_element_get_index")]
		public long get_index ();
		[CCode (cname = "webkit_dom_html_option_element_get_label")]
		public unowned string get_label ();
		[CCode (cname = "webkit_dom_html_option_element_get_selected")]
		public bool get_selected ();
		[CCode (cname = "webkit_dom_html_option_element_get_text")]
		public unowned string get_text ();
		[CCode (cname = "webkit_dom_html_option_element_get_value")]
		public unowned string get_value ();
		[CCode (cname = "webkit_dom_html_option_element_set_default_selected")]
		public void set_default_selected (bool value);
		[CCode (cname = "webkit_dom_html_option_element_set_disabled")]
		public void set_disabled (bool value);
		[CCode (cname = "webkit_dom_html_option_element_set_label")]
		public void set_label (string value);
		[CCode (cname = "webkit_dom_html_option_element_set_selected")]
		public void set_selected (bool value);
		[CCode (cname = "webkit_dom_html_option_element_set_value")]
		public void set_value (string value);
		public bool default_selected { get; set; }
		public bool disabled { get; set; }
		public WebKit.DOMHTMLFormElement form { get; }
		public long index { get; }
		public string label { get; set; }
		public bool selected { get; set; }
		public string text { get; }
		public string value { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLOptionsCollection : WebKit.DOMHTMLCollection {
		[CCode (has_construct_function = false)]
		protected DOMHTMLOptionsCollection ();
		[CCode (cname = "webkit_dom_html_options_collection_get_selected_index")]
		public long get_selected_index ();
		[CCode (cname = "webkit_dom_html_options_collection_set_selected_index")]
		public void set_selected_index (long value);
		public long selected_index { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLParagraphElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLParagraphElement ();
		[CCode (cname = "webkit_dom_html_paragraph_element_get_align")]
		public unowned string get_align ();
		[CCode (cname = "webkit_dom_html_paragraph_element_set_align")]
		public void set_align (string value);
		public string align { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLParamElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLParamElement ();
		[CCode (cname = "webkit_dom_html_param_element_get_name")]
		public unowned string get_name ();
		[CCode (cname = "webkit_dom_html_param_element_get_value")]
		public unowned string get_value ();
		[CCode (cname = "webkit_dom_html_param_element_get_value_type")]
		public unowned string get_value_type ();
		[CCode (cname = "webkit_dom_html_param_element_set_name")]
		public void set_name (string value);
		[CCode (cname = "webkit_dom_html_param_element_set_value")]
		public void set_value (string value);
		[CCode (cname = "webkit_dom_html_param_element_set_value_type")]
		public void set_value_type (string value);
		public string name { get; set; }
		[NoAccessorMethod]
		public string type { owned get; set; }
		public string value { get; set; }
		public string value_type { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLPreElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLPreElement ();
		[CCode (cname = "webkit_dom_html_pre_element_get_width")]
		public long get_width ();
		[CCode (cname = "webkit_dom_html_pre_element_get_wrap")]
		public bool get_wrap ();
		[CCode (cname = "webkit_dom_html_pre_element_set_width")]
		public void set_width (long value);
		[CCode (cname = "webkit_dom_html_pre_element_set_wrap")]
		public void set_wrap (bool value);
		public long width { get; set; }
		public bool wrap { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLQuoteElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLQuoteElement ();
		[CCode (cname = "webkit_dom_html_quote_element_get_cite")]
		public unowned string get_cite ();
		[CCode (cname = "webkit_dom_html_quote_element_set_cite")]
		public void set_cite (string value);
		public string cite { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLScriptElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLScriptElement ();
		[CCode (cname = "webkit_dom_html_script_element_get_async")]
		public bool get_async ();
		[CCode (cname = "webkit_dom_html_script_element_get_charset")]
		public unowned string get_charset ();
		[CCode (cname = "webkit_dom_html_script_element_get_defer")]
		public bool get_defer ();
		[CCode (cname = "webkit_dom_html_script_element_get_event")]
		public unowned string get_event ();
		[CCode (cname = "webkit_dom_html_script_element_get_html_for")]
		public unowned string get_html_for ();
		[CCode (cname = "webkit_dom_html_script_element_get_src")]
		public unowned string get_src ();
		[CCode (cname = "webkit_dom_html_script_element_get_text")]
		public unowned string get_text ();
		[CCode (cname = "webkit_dom_html_script_element_set_async")]
		public void set_async (bool value);
		[CCode (cname = "webkit_dom_html_script_element_set_charset")]
		public void set_charset (string value);
		[CCode (cname = "webkit_dom_html_script_element_set_defer")]
		public void set_defer (bool value);
		[CCode (cname = "webkit_dom_html_script_element_set_event")]
		public void set_event (string value);
		[CCode (cname = "webkit_dom_html_script_element_set_html_for")]
		public void set_html_for (string value);
		[CCode (cname = "webkit_dom_html_script_element_set_src")]
		public void set_src (string value);
		[CCode (cname = "webkit_dom_html_script_element_set_text")]
		public void set_text (string value);
		public bool @async { get; set; }
		public string charset { get; set; }
		public bool defer { get; set; }
		public string event { get; set; }
		public string html_for { get; set; }
		public string src { get; set; }
		public string text { get; set; }
		[NoAccessorMethod]
		public string type { owned get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLSelectElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLSelectElement ();
		[CCode (cname = "webkit_dom_html_select_element_add")]
		public void add (WebKit.DOMHTMLElement element, WebKit.DOMHTMLElement before) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_select_element_check_validity")]
		public bool check_validity ();
		[CCode (cname = "webkit_dom_html_select_element_get_autofocus")]
		public bool get_autofocus ();
		[CCode (cname = "webkit_dom_html_select_element_get_disabled")]
		public bool get_disabled ();
		[CCode (cname = "webkit_dom_html_select_element_get_form")]
		public unowned WebKit.DOMHTMLFormElement get_form ();
		[CCode (cname = "webkit_dom_html_select_element_get_labels")]
		public unowned WebKit.DOMNodeList get_labels ();
		[CCode (cname = "webkit_dom_html_select_element_get_length")]
		public ulong get_length ();
		[CCode (cname = "webkit_dom_html_select_element_get_multiple")]
		public bool get_multiple ();
		[CCode (cname = "webkit_dom_html_select_element_get_name")]
		public unowned string get_name ();
		[CCode (cname = "webkit_dom_html_select_element_get_options")]
		public unowned WebKit.DOMHTMLOptionsCollection get_options ();
		[CCode (cname = "webkit_dom_html_select_element_get_required")]
		public bool get_required ();
		[CCode (cname = "webkit_dom_html_select_element_get_selected_index")]
		public long get_selected_index ();
		[CCode (cname = "webkit_dom_html_select_element_get_size")]
		public long get_size ();
		[CCode (cname = "webkit_dom_html_select_element_get_validation_message")]
		public unowned string get_validation_message ();
		[CCode (cname = "webkit_dom_html_select_element_get_validity")]
		public unowned WebKit.DOMValidityState get_validity ();
		[CCode (cname = "webkit_dom_html_select_element_get_value")]
		public unowned string get_value ();
		[CCode (cname = "webkit_dom_html_select_element_get_will_validate")]
		public bool get_will_validate ();
		[CCode (cname = "webkit_dom_html_select_element_item")]
		public unowned WebKit.DOMNode item (ulong index);
		[CCode (cname = "webkit_dom_html_select_element_named_item")]
		public unowned WebKit.DOMNode named_item (string name);
		[CCode (cname = "webkit_dom_html_select_element_remove")]
		public void remove (long index);
		[CCode (cname = "webkit_dom_html_select_element_set_autofocus")]
		public void set_autofocus (bool value);
		[CCode (cname = "webkit_dom_html_select_element_set_custom_validity")]
		public void set_custom_validity (string error);
		[CCode (cname = "webkit_dom_html_select_element_set_disabled")]
		public void set_disabled (bool value);
		[CCode (cname = "webkit_dom_html_select_element_set_length")]
		public void set_length (ulong value) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_select_element_set_multiple")]
		public void set_multiple (bool value);
		[CCode (cname = "webkit_dom_html_select_element_set_name")]
		public void set_name (string value);
		[CCode (cname = "webkit_dom_html_select_element_set_required")]
		public void set_required (bool value);
		[CCode (cname = "webkit_dom_html_select_element_set_selected_index")]
		public void set_selected_index (long value);
		[CCode (cname = "webkit_dom_html_select_element_set_size")]
		public void set_size (long value);
		[CCode (cname = "webkit_dom_html_select_element_set_value")]
		public void set_value (string value);
		public bool autofocus { get; set; }
		public bool disabled { get; set; }
		public WebKit.DOMHTMLFormElement form { get; }
		public WebKit.DOMNodeList labels { get; }
		public ulong length { get; set; }
		public bool multiple { get; set; }
		public string name { get; set; }
		public WebKit.DOMHTMLOptionsCollection options { get; }
		public bool required { get; set; }
		public long selected_index { get; set; }
		public long size { get; set; }
		[NoAccessorMethod]
		public string type { owned get; }
		public string validation_message { get; }
		public WebKit.DOMValidityState validity { get; }
		public string value { get; set; }
		public bool will_validate { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLStyleElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLStyleElement ();
		[CCode (cname = "webkit_dom_html_style_element_get_disabled")]
		public bool get_disabled ();
		[CCode (cname = "webkit_dom_html_style_element_get_media")]
		public unowned string get_media ();
		[CCode (cname = "webkit_dom_html_style_element_get_sheet")]
		public unowned WebKit.DOMStyleSheet get_sheet ();
		[CCode (cname = "webkit_dom_html_style_element_set_disabled")]
		public void set_disabled (bool value);
		[CCode (cname = "webkit_dom_html_style_element_set_media")]
		public void set_media (string value);
		public bool disabled { get; set; }
		public string media { get; set; }
		public WebKit.DOMStyleSheet sheet { get; }
		[NoAccessorMethod]
		public string type { owned get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLTableCaptionElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLTableCaptionElement ();
		[CCode (cname = "webkit_dom_html_table_caption_element_get_align")]
		public unowned string get_align ();
		[CCode (cname = "webkit_dom_html_table_caption_element_set_align")]
		public void set_align (string value);
		public string align { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLTableCellElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLTableCellElement ();
		[CCode (cname = "webkit_dom_html_table_cell_element_get_abbr")]
		public unowned string get_abbr ();
		[CCode (cname = "webkit_dom_html_table_cell_element_get_align")]
		public unowned string get_align ();
		[CCode (cname = "webkit_dom_html_table_cell_element_get_axis")]
		public unowned string get_axis ();
		[CCode (cname = "webkit_dom_html_table_cell_element_get_bg_color")]
		public unowned string get_bg_color ();
		[CCode (cname = "webkit_dom_html_table_cell_element_get_cell_index")]
		public long get_cell_index ();
		[CCode (cname = "webkit_dom_html_table_cell_element_get_ch")]
		public unowned string get_ch ();
		[CCode (cname = "webkit_dom_html_table_cell_element_get_ch_off")]
		public unowned string get_ch_off ();
		[CCode (cname = "webkit_dom_html_table_cell_element_get_col_span")]
		public long get_col_span ();
		[CCode (cname = "webkit_dom_html_table_cell_element_get_headers")]
		public unowned string get_headers ();
		[CCode (cname = "webkit_dom_html_table_cell_element_get_height")]
		public unowned string get_height ();
		[CCode (cname = "webkit_dom_html_table_cell_element_get_no_wrap")]
		public bool get_no_wrap ();
		[CCode (cname = "webkit_dom_html_table_cell_element_get_row_span")]
		public long get_row_span ();
		[CCode (cname = "webkit_dom_html_table_cell_element_get_scope")]
		public unowned string get_scope ();
		[CCode (cname = "webkit_dom_html_table_cell_element_get_v_align")]
		public unowned string get_v_align ();
		[CCode (cname = "webkit_dom_html_table_cell_element_get_width")]
		public unowned string get_width ();
		[CCode (cname = "webkit_dom_html_table_cell_element_set_abbr")]
		public void set_abbr (string value);
		[CCode (cname = "webkit_dom_html_table_cell_element_set_align")]
		public void set_align (string value);
		[CCode (cname = "webkit_dom_html_table_cell_element_set_axis")]
		public void set_axis (string value);
		[CCode (cname = "webkit_dom_html_table_cell_element_set_bg_color")]
		public void set_bg_color (string value);
		[CCode (cname = "webkit_dom_html_table_cell_element_set_ch")]
		public void set_ch (string value);
		[CCode (cname = "webkit_dom_html_table_cell_element_set_ch_off")]
		public void set_ch_off (string value);
		[CCode (cname = "webkit_dom_html_table_cell_element_set_col_span")]
		public void set_col_span (long value);
		[CCode (cname = "webkit_dom_html_table_cell_element_set_headers")]
		public void set_headers (string value);
		[CCode (cname = "webkit_dom_html_table_cell_element_set_height")]
		public void set_height (string value);
		[CCode (cname = "webkit_dom_html_table_cell_element_set_no_wrap")]
		public void set_no_wrap (bool value);
		[CCode (cname = "webkit_dom_html_table_cell_element_set_row_span")]
		public void set_row_span (long value);
		[CCode (cname = "webkit_dom_html_table_cell_element_set_scope")]
		public void set_scope (string value);
		[CCode (cname = "webkit_dom_html_table_cell_element_set_v_align")]
		public void set_v_align (string value);
		[CCode (cname = "webkit_dom_html_table_cell_element_set_width")]
		public void set_width (string value);
		public string abbr { get; set; }
		public string align { get; set; }
		public string axis { get; set; }
		public string bg_color { get; set; }
		public long cell_index { get; }
		public string ch { get; set; }
		public string ch_off { get; set; }
		public long col_span { get; set; }
		public string headers { get; set; }
		public string height { get; set; }
		public bool no_wrap { get; set; }
		public long row_span { get; set; }
		public string scope { get; set; }
		public string v_align { get; set; }
		public string width { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLTableColElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLTableColElement ();
		[CCode (cname = "webkit_dom_html_table_col_element_get_align")]
		public unowned string get_align ();
		[CCode (cname = "webkit_dom_html_table_col_element_get_ch")]
		public unowned string get_ch ();
		[CCode (cname = "webkit_dom_html_table_col_element_get_ch_off")]
		public unowned string get_ch_off ();
		[CCode (cname = "webkit_dom_html_table_col_element_get_span")]
		public long get_span ();
		[CCode (cname = "webkit_dom_html_table_col_element_get_v_align")]
		public unowned string get_v_align ();
		[CCode (cname = "webkit_dom_html_table_col_element_get_width")]
		public unowned string get_width ();
		[CCode (cname = "webkit_dom_html_table_col_element_set_align")]
		public void set_align (string value);
		[CCode (cname = "webkit_dom_html_table_col_element_set_ch")]
		public void set_ch (string value);
		[CCode (cname = "webkit_dom_html_table_col_element_set_ch_off")]
		public void set_ch_off (string value);
		[CCode (cname = "webkit_dom_html_table_col_element_set_span")]
		public void set_span (long value);
		[CCode (cname = "webkit_dom_html_table_col_element_set_v_align")]
		public void set_v_align (string value);
		[CCode (cname = "webkit_dom_html_table_col_element_set_width")]
		public void set_width (string value);
		public string align { get; set; }
		public string ch { get; set; }
		public string ch_off { get; set; }
		public long span { get; set; }
		public string v_align { get; set; }
		public string width { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLTableElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLTableElement ();
		[CCode (cname = "webkit_dom_html_table_element_create_caption")]
		public unowned WebKit.DOMHTMLElement create_caption ();
		[CCode (cname = "webkit_dom_html_table_element_create_t_foot")]
		public unowned WebKit.DOMHTMLElement create_t_foot ();
		[CCode (cname = "webkit_dom_html_table_element_create_t_head")]
		public unowned WebKit.DOMHTMLElement create_t_head ();
		[CCode (cname = "webkit_dom_html_table_element_delete_caption")]
		public void delete_caption ();
		[CCode (cname = "webkit_dom_html_table_element_delete_row")]
		public void delete_row (long index) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_table_element_delete_t_foot")]
		public void delete_t_foot ();
		[CCode (cname = "webkit_dom_html_table_element_delete_t_head")]
		public void delete_t_head ();
		[CCode (cname = "webkit_dom_html_table_element_get_align")]
		public unowned string get_align ();
		[CCode (cname = "webkit_dom_html_table_element_get_bg_color")]
		public unowned string get_bg_color ();
		[CCode (cname = "webkit_dom_html_table_element_get_border")]
		public unowned string get_border ();
		[CCode (cname = "webkit_dom_html_table_element_get_caption")]
		public unowned WebKit.DOMHTMLTableCaptionElement get_caption ();
		[CCode (cname = "webkit_dom_html_table_element_get_cell_padding")]
		public unowned string get_cell_padding ();
		[CCode (cname = "webkit_dom_html_table_element_get_cell_spacing")]
		public unowned string get_cell_spacing ();
		[CCode (cname = "webkit_dom_html_table_element_get_frame")]
		public unowned string get_frame ();
		[CCode (cname = "webkit_dom_html_table_element_get_rows")]
		public unowned WebKit.DOMHTMLCollection get_rows ();
		[CCode (cname = "webkit_dom_html_table_element_get_rules")]
		public unowned string get_rules ();
		[CCode (cname = "webkit_dom_html_table_element_get_summary")]
		public unowned string get_summary ();
		[CCode (cname = "webkit_dom_html_table_element_get_t_bodies")]
		public unowned WebKit.DOMHTMLCollection get_t_bodies ();
		[CCode (cname = "webkit_dom_html_table_element_get_t_foot")]
		public unowned WebKit.DOMHTMLTableSectionElement get_t_foot ();
		[CCode (cname = "webkit_dom_html_table_element_get_t_head")]
		public unowned WebKit.DOMHTMLTableSectionElement get_t_head ();
		[CCode (cname = "webkit_dom_html_table_element_get_width")]
		public unowned string get_width ();
		[CCode (cname = "webkit_dom_html_table_element_insert_row")]
		public unowned WebKit.DOMHTMLElement insert_row (long index) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_table_element_set_align")]
		public void set_align (string value);
		[CCode (cname = "webkit_dom_html_table_element_set_bg_color")]
		public void set_bg_color (string value);
		[CCode (cname = "webkit_dom_html_table_element_set_border")]
		public void set_border (string value);
		[CCode (cname = "webkit_dom_html_table_element_set_caption")]
		public void set_caption (WebKit.DOMHTMLTableCaptionElement value) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_table_element_set_cell_padding")]
		public void set_cell_padding (string value);
		[CCode (cname = "webkit_dom_html_table_element_set_cell_spacing")]
		public void set_cell_spacing (string value);
		[CCode (cname = "webkit_dom_html_table_element_set_frame")]
		public void set_frame (string value);
		[CCode (cname = "webkit_dom_html_table_element_set_rules")]
		public void set_rules (string value);
		[CCode (cname = "webkit_dom_html_table_element_set_summary")]
		public void set_summary (string value);
		[CCode (cname = "webkit_dom_html_table_element_set_t_foot")]
		public void set_t_foot (WebKit.DOMHTMLTableSectionElement value) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_table_element_set_t_head")]
		public void set_t_head (WebKit.DOMHTMLTableSectionElement value) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_table_element_set_width")]
		public void set_width (string value);
		public string align { get; set; }
		public string bg_color { get; set; }
		public string border { get; set; }
		public WebKit.DOMHTMLTableCaptionElement caption { get; set; }
		public string cell_padding { get; set; }
		public string cell_spacing { get; set; }
		public string frame { get; set; }
		public WebKit.DOMHTMLCollection rows { get; }
		public string rules { get; set; }
		public string summary { get; set; }
		public WebKit.DOMHTMLCollection t_bodies { get; }
		public WebKit.DOMHTMLTableSectionElement t_foot { get; set; }
		public WebKit.DOMHTMLTableSectionElement t_head { get; set; }
		public string width { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLTableRowElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLTableRowElement ();
		[CCode (cname = "webkit_dom_html_table_row_element_delete_cell")]
		public void delete_cell (long index) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_table_row_element_get_align")]
		public unowned string get_align ();
		[CCode (cname = "webkit_dom_html_table_row_element_get_bg_color")]
		public unowned string get_bg_color ();
		[CCode (cname = "webkit_dom_html_table_row_element_get_cells")]
		public unowned WebKit.DOMHTMLCollection get_cells ();
		[CCode (cname = "webkit_dom_html_table_row_element_get_ch")]
		public unowned string get_ch ();
		[CCode (cname = "webkit_dom_html_table_row_element_get_ch_off")]
		public unowned string get_ch_off ();
		[CCode (cname = "webkit_dom_html_table_row_element_get_row_index")]
		public long get_row_index ();
		[CCode (cname = "webkit_dom_html_table_row_element_get_section_row_index")]
		public long get_section_row_index ();
		[CCode (cname = "webkit_dom_html_table_row_element_get_v_align")]
		public unowned string get_v_align ();
		[CCode (cname = "webkit_dom_html_table_row_element_insert_cell")]
		public unowned WebKit.DOMHTMLElement insert_cell (long index) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_table_row_element_set_align")]
		public void set_align (string value);
		[CCode (cname = "webkit_dom_html_table_row_element_set_bg_color")]
		public void set_bg_color (string value);
		[CCode (cname = "webkit_dom_html_table_row_element_set_ch")]
		public void set_ch (string value);
		[CCode (cname = "webkit_dom_html_table_row_element_set_ch_off")]
		public void set_ch_off (string value);
		[CCode (cname = "webkit_dom_html_table_row_element_set_v_align")]
		public void set_v_align (string value);
		public string align { get; set; }
		public string bg_color { get; set; }
		public WebKit.DOMHTMLCollection cells { get; }
		public string ch { get; set; }
		public string ch_off { get; set; }
		public long row_index { get; }
		public long section_row_index { get; }
		public string v_align { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLTableSectionElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLTableSectionElement ();
		[CCode (cname = "webkit_dom_html_table_section_element_delete_row")]
		public void delete_row (long index) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_table_section_element_get_align")]
		public unowned string get_align ();
		[CCode (cname = "webkit_dom_html_table_section_element_get_ch")]
		public unowned string get_ch ();
		[CCode (cname = "webkit_dom_html_table_section_element_get_ch_off")]
		public unowned string get_ch_off ();
		[CCode (cname = "webkit_dom_html_table_section_element_get_rows")]
		public unowned WebKit.DOMHTMLCollection get_rows ();
		[CCode (cname = "webkit_dom_html_table_section_element_get_v_align")]
		public unowned string get_v_align ();
		[CCode (cname = "webkit_dom_html_table_section_element_insert_row")]
		public unowned WebKit.DOMHTMLElement insert_row (long index) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_table_section_element_set_align")]
		public void set_align (string value);
		[CCode (cname = "webkit_dom_html_table_section_element_set_ch")]
		public void set_ch (string value);
		[CCode (cname = "webkit_dom_html_table_section_element_set_ch_off")]
		public void set_ch_off (string value);
		[CCode (cname = "webkit_dom_html_table_section_element_set_v_align")]
		public void set_v_align (string value);
		public string align { get; set; }
		public string ch { get; set; }
		public string ch_off { get; set; }
		public WebKit.DOMHTMLCollection rows { get; }
		public string v_align { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLTextAreaElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLTextAreaElement ();
		[CCode (cname = "webkit_dom_html_text_area_element_check_validity")]
		public bool check_validity ();
		[CCode (cname = "webkit_dom_html_text_area_element_get_access_key")]
		public unowned string get_access_key ();
		[CCode (cname = "webkit_dom_html_text_area_element_get_autofocus")]
		public bool get_autofocus ();
		[CCode (cname = "webkit_dom_html_text_area_element_get_cols")]
		public long get_cols ();
		[CCode (cname = "webkit_dom_html_text_area_element_get_default_value")]
		public unowned string get_default_value ();
		[CCode (cname = "webkit_dom_html_text_area_element_get_disabled")]
		public bool get_disabled ();
		[CCode (cname = "webkit_dom_html_text_area_element_get_form")]
		public unowned WebKit.DOMHTMLFormElement get_form ();
		[CCode (cname = "webkit_dom_html_text_area_element_get_labels")]
		public unowned WebKit.DOMNodeList get_labels ();
		[CCode (cname = "webkit_dom_html_text_area_element_get_max_length")]
		public long get_max_length ();
		[CCode (cname = "webkit_dom_html_text_area_element_get_name")]
		public unowned string get_name ();
		[CCode (cname = "webkit_dom_html_text_area_element_get_placeholder")]
		public unowned string get_placeholder ();
		[CCode (cname = "webkit_dom_html_text_area_element_get_read_only")]
		public bool get_read_only ();
		[CCode (cname = "webkit_dom_html_text_area_element_get_required")]
		public bool get_required ();
		[CCode (cname = "webkit_dom_html_text_area_element_get_rows")]
		public long get_rows ();
		[CCode (cname = "webkit_dom_html_text_area_element_get_selection_direction")]
		public unowned string get_selection_direction ();
		[CCode (cname = "webkit_dom_html_text_area_element_get_selection_end")]
		public long get_selection_end ();
		[CCode (cname = "webkit_dom_html_text_area_element_get_selection_start")]
		public long get_selection_start ();
		[CCode (cname = "webkit_dom_html_text_area_element_get_text_length")]
		public ulong get_text_length ();
		[CCode (cname = "webkit_dom_html_text_area_element_get_validation_message")]
		public unowned string get_validation_message ();
		[CCode (cname = "webkit_dom_html_text_area_element_get_validity")]
		public unowned WebKit.DOMValidityState get_validity ();
		[CCode (cname = "webkit_dom_html_text_area_element_get_value")]
		public unowned string get_value ();
		[CCode (cname = "webkit_dom_html_text_area_element_get_will_validate")]
		public bool get_will_validate ();
		[CCode (cname = "webkit_dom_html_text_area_element_is_edited")]
		public bool is_edited ();
		[CCode (cname = "webkit_dom_html_text_area_element_select")]
		public void select ();
		[CCode (cname = "webkit_dom_html_text_area_element_set_access_key")]
		public void set_access_key (string value);
		[CCode (cname = "webkit_dom_html_text_area_element_set_autofocus")]
		public void set_autofocus (bool value);
		[CCode (cname = "webkit_dom_html_text_area_element_set_cols")]
		public void set_cols (long value);
		[CCode (cname = "webkit_dom_html_text_area_element_set_custom_validity")]
		public void set_custom_validity (string error);
		[CCode (cname = "webkit_dom_html_text_area_element_set_default_value")]
		public void set_default_value (string value);
		[CCode (cname = "webkit_dom_html_text_area_element_set_disabled")]
		public void set_disabled (bool value);
		[CCode (cname = "webkit_dom_html_text_area_element_set_max_length")]
		public void set_max_length (long value) throws GLib.Error;
		[CCode (cname = "webkit_dom_html_text_area_element_set_name")]
		public void set_name (string value);
		[CCode (cname = "webkit_dom_html_text_area_element_set_placeholder")]
		public void set_placeholder (string value);
		[CCode (cname = "webkit_dom_html_text_area_element_set_read_only")]
		public void set_read_only (bool value);
		[CCode (cname = "webkit_dom_html_text_area_element_set_required")]
		public void set_required (bool value);
		[CCode (cname = "webkit_dom_html_text_area_element_set_rows")]
		public void set_rows (long value);
		[CCode (cname = "webkit_dom_html_text_area_element_set_selection_direction")]
		public void set_selection_direction (string value);
		[CCode (cname = "webkit_dom_html_text_area_element_set_selection_end")]
		public void set_selection_end (long value);
		[CCode (cname = "webkit_dom_html_text_area_element_set_selection_range")]
		public void set_selection_range (long start, long end, string direction);
		[CCode (cname = "webkit_dom_html_text_area_element_set_selection_start")]
		public void set_selection_start (long value);
		[CCode (cname = "webkit_dom_html_text_area_element_set_value")]
		public void set_value (string value);
		public string access_key { get; set; }
		public bool autofocus { get; set; }
		public long cols { get; set; }
		public string default_value { get; set; }
		public bool disabled { get; set; }
		public WebKit.DOMHTMLFormElement form { get; }
		public WebKit.DOMNodeList labels { get; }
		public long max_length { get; set; }
		public string name { get; set; }
		public string placeholder { get; set; }
		public bool read_only { get; set; }
		public bool required { get; set; }
		public long rows { get; set; }
		public string selection_direction { get; set; }
		public long selection_end { get; set; }
		public long selection_start { get; set; }
		public ulong text_length { get; }
		[NoAccessorMethod]
		public string type { owned get; }
		public string validation_message { get; }
		public WebKit.DOMValidityState validity { get; }
		public string value { get; set; }
		public bool will_validate { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLTitleElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLTitleElement ();
		[CCode (cname = "webkit_dom_html_title_element_get_text")]
		public unowned string get_text ();
		[CCode (cname = "webkit_dom_html_title_element_set_text")]
		public void set_text (string value);
		public string text { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLUListElement : WebKit.DOMHTMLElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLUListElement ();
		[CCode (cname = "webkit_dom_htmlu_list_element_get_compact")]
		public bool get_compact ();
		[CCode (cname = "webkit_dom_htmlu_list_element_set_compact")]
		public void set_compact (bool value);
		public bool compact { get; set; }
		[NoAccessorMethod]
		public string type { owned get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHTMLVideoElement : WebKit.DOMHTMLMediaElement, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMHTMLVideoElement ();
		[CCode (cname = "webkit_dom_html_video_element_get_height")]
		public ulong get_height ();
		[CCode (cname = "webkit_dom_html_video_element_get_poster")]
		public unowned string get_poster ();
		[CCode (cname = "webkit_dom_html_video_element_get_video_height")]
		public ulong get_video_height ();
		[CCode (cname = "webkit_dom_html_video_element_get_video_width")]
		public ulong get_video_width ();
		[CCode (cname = "webkit_dom_html_video_element_get_webkit_decoded_frame_count")]
		public ulong get_webkit_decoded_frame_count ();
		[CCode (cname = "webkit_dom_html_video_element_get_webkit_displaying_fullscreen")]
		public bool get_webkit_displaying_fullscreen ();
		[CCode (cname = "webkit_dom_html_video_element_get_webkit_dropped_frame_count")]
		public ulong get_webkit_dropped_frame_count ();
		[CCode (cname = "webkit_dom_html_video_element_get_webkit_supports_fullscreen")]
		public bool get_webkit_supports_fullscreen ();
		[CCode (cname = "webkit_dom_html_video_element_get_width")]
		public ulong get_width ();
		[CCode (cname = "webkit_dom_html_video_element_set_height")]
		public void set_height (ulong value);
		[CCode (cname = "webkit_dom_html_video_element_set_poster")]
		public void set_poster (string value);
		[CCode (cname = "webkit_dom_html_video_element_set_width")]
		public void set_width (ulong value);
		[CCode (cname = "webkit_dom_html_video_element_webkit_enter_full_screen")]
		public void webkit_enter_full_screen () throws GLib.Error;
		[CCode (cname = "webkit_dom_html_video_element_webkit_enter_fullscreen")]
		public void webkit_enter_fullscreen () throws GLib.Error;
		[CCode (cname = "webkit_dom_html_video_element_webkit_exit_full_screen")]
		public void webkit_exit_full_screen ();
		[CCode (cname = "webkit_dom_html_video_element_webkit_exit_fullscreen")]
		public void webkit_exit_fullscreen ();
		public ulong height { get; set; }
		public string poster { get; set; }
		public ulong video_height { get; }
		public ulong video_width { get; }
		public bool webkit_displaying_fullscreen { get; }
		public bool webkit_supports_fullscreen { get; }
		public ulong width { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMHistory : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMHistory ();
		public void back ();
		public void forward ();
		public ulong get_length ();
		public void go (long distance);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMLocation : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMLocation ();
		public unowned string get_origin ();
		public unowned string get_parameter (string name);
		public string origin { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMMediaError : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMMediaError ();
		public ushort get_code ();
		public uint code { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMMediaList : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMMediaList ();
		public void append_medium (string new_medium) throws GLib.Error;
		public void delete_medium (string old_medium) throws GLib.Error;
		public ulong get_length ();
		public unowned string get_media_text ();
		public unowned string item (ulong index);
		public void set_media_text (string value) throws GLib.Error;
		public ulong length { get; }
		public string media_text { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMMediaQueryList : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMMediaQueryList ();
		public bool get_matches ();
		public unowned string get_media ();
		public bool matches { get; }
		public string media { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMMemoryInfo : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMMemoryInfo ();
		public ulong get_js_heap_size_limit ();
		public ulong get_total_js_heap_size ();
		public ulong get_used_js_heap_size ();
		public ulong js_heap_size_limit { get; }
		public ulong total_js_heap_size { get; }
		public ulong used_js_heap_size { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMMessagePort : WebKit.DOMObject, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMMessagePort ();
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMMouseEvent : WebKit.DOMUIEvent {
		[CCode (has_construct_function = false)]
		protected DOMMouseEvent ();
		public bool get_alt_key ();
		public ushort get_button ();
		public long get_client_x ();
		public long get_client_y ();
		public bool get_ctrl_key ();
		public unowned WebKit.DOMNode get_from_element ();
		public bool get_meta_key ();
		public long get_offset_x ();
		public long get_offset_y ();
		public unowned WebKit.DOMEventTarget get_related_target ();
		public long get_screen_x ();
		public long get_screen_y ();
		public bool get_shift_key ();
		public unowned WebKit.DOMNode get_to_element ();
		public long get_x ();
		public long get_y ();
		public void init_mouse_event (string type, bool can_bubble, bool cancelable, WebKit.DOMDOMWindow view, long detail, long screen_x, long screen_y, long client_x, long client_y, bool ctrl_key, bool alt_key, bool shift_key, bool meta_key, ushort button, WebKit.DOMEventTarget related_target);
		public bool alt_key { get; }
		public uint button { get; }
		public long client_x { get; }
		public long client_y { get; }
		public bool ctrl_key { get; }
		public WebKit.DOMNode from_element { get; }
		public bool meta_key { get; }
		public long offset_x { get; }
		public long offset_y { get; }
		public WebKit.DOMEventTarget related_target { get; }
		public long screen_x { get; }
		public long screen_y { get; }
		public bool shift_key { get; }
		public WebKit.DOMNode to_element { get; }
		public long x { get; }
		public long y { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMNamedNodeMap : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMNamedNodeMap ();
		public ulong get_length ();
		public unowned WebKit.DOMNode get_named_item (string name);
		public unowned WebKit.DOMNode get_named_item_ns (string namespace_uri, string local_name);
		public unowned WebKit.DOMNode item (ulong index);
		public unowned WebKit.DOMNode remove_named_item (string name) throws GLib.Error;
		public unowned WebKit.DOMNode remove_named_item_ns (string namespace_uri, string local_name) throws GLib.Error;
		public unowned WebKit.DOMNode set_named_item (WebKit.DOMNode node) throws GLib.Error;
		public unowned WebKit.DOMNode set_named_item_ns (WebKit.DOMNode node) throws GLib.Error;
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMNavigator : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMNavigator ();
		public unowned string get_app_code_name ();
		public unowned string get_app_name ();
		public unowned string get_app_version ();
		public bool get_cookie_enabled ();
		public unowned WebKit.DOMGeolocation get_geolocation ();
		public unowned string get_language ();
		public unowned WebKit.DOMDOMMimeTypeArray get_mime_types ();
		public bool get_on_line ();
		public unowned string get_platform ();
		public unowned WebKit.DOMDOMPluginArray get_plugins ();
		public unowned string get_product ();
		public unowned string get_product_sub ();
		public void get_storage_updates ();
		public unowned string get_user_agent ();
		public unowned string get_vendor ();
		public unowned string get_vendor_sub ();
		public bool java_enabled ();
		public string app_code_name { get; }
		public string app_name { get; }
		public string app_version { get; }
		public bool cookie_enabled { get; }
		public WebKit.DOMGeolocation geolocation { get; }
		public string language { get; }
		public WebKit.DOMDOMMimeTypeArray mime_types { get; }
		public bool on_line { get; }
		public string platform { get; }
		public WebKit.DOMDOMPluginArray plugins { get; }
		public string product { get; }
		public string product_sub { get; }
		public string user_agent { get; }
		public string vendor { get; }
		public string vendor_sub { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMNode : WebKit.DOMObject, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMNode ();
		public unowned WebKit.DOMNode append_child (WebKit.DOMNode new_child) throws GLib.Error;
		public unowned WebKit.DOMNode clone_node (bool deep);
		public ushort compare_document_position (WebKit.DOMNode other);
		public bool contains (WebKit.DOMNode other);
		public unowned WebKit.DOMNamedNodeMap get_attributes ();
		public unowned string get_base_uri ();
		public unowned WebKit.DOMNodeList get_child_nodes ();
		public unowned WebKit.DOMNode get_first_child ();
		public unowned WebKit.DOMNode get_last_child ();
		public unowned string get_local_name ();
		public unowned string get_namespace_uri ();
		public unowned WebKit.DOMNode get_next_sibling ();
		public unowned string get_node_name ();
		public ushort get_node_type ();
		public unowned string get_node_value ();
		public unowned WebKit.DOMDocument get_owner_document ();
		public unowned WebKit.DOMElement get_parent_element ();
		public unowned WebKit.DOMNode get_parent_node ();
		public unowned string get_prefix ();
		public unowned WebKit.DOMNode get_previous_sibling ();
		public unowned string get_text_content ();
		public bool has_attributes ();
		public bool has_child_nodes ();
		public unowned WebKit.DOMNode insert_before (WebKit.DOMNode new_child, WebKit.DOMNode ref_child) throws GLib.Error;
		public bool is_default_namespace (string namespace_uri);
		public bool is_equal_node (WebKit.DOMNode other);
		public bool is_same_node (WebKit.DOMNode other);
		public bool is_supported (string feature, string version);
		public unowned string lookup_namespace_uri (string prefix);
		public unowned string lookup_prefix (string namespace_uri);
		public void normalize ();
		public unowned WebKit.DOMNode remove_child (WebKit.DOMNode old_child) throws GLib.Error;
		public unowned WebKit.DOMNode replace_child (WebKit.DOMNode new_child, WebKit.DOMNode old_child) throws GLib.Error;
		public void set_node_value (string value) throws GLib.Error;
		public void set_prefix (string value) throws GLib.Error;
		public void set_text_content (string value) throws GLib.Error;
		public WebKit.DOMNamedNodeMap attributes { get; }
		public string base_uri { get; }
		public WebKit.DOMNodeList child_nodes { get; }
		public WebKit.DOMNode first_child { get; }
		public WebKit.DOMNode last_child { get; }
		public string local_name { get; }
		public string namespace_uri { get; }
		public WebKit.DOMNode next_sibling { get; }
		public string node_name { get; }
		public uint node_type { get; }
		public string node_value { get; set; }
		public WebKit.DOMDocument owner_document { get; }
		public WebKit.DOMElement parent_element { get; }
		public WebKit.DOMNode parent_node { get; }
		public string prefix { get; set; }
		public WebKit.DOMNode previous_sibling { get; }
		public string text_content { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMNodeFilter : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMNodeFilter ();
		public short accept_node (WebKit.DOMNode n);
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMNodeIterator : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMNodeIterator ();
		public void detach ();
		public bool get_expand_entity_references ();
		public unowned WebKit.DOMNodeFilter get_filter ();
		public bool get_pointer_before_reference_node ();
		public unowned WebKit.DOMNode get_reference_node ();
		public unowned WebKit.DOMNode get_root ();
		public ulong get_what_to_show ();
		public unowned WebKit.DOMNode next_node () throws GLib.Error;
		public unowned WebKit.DOMNode previous_node () throws GLib.Error;
		public bool expand_entity_references { get; }
		public WebKit.DOMNodeFilter filter { get; }
		public bool pointer_before_reference_node { get; }
		public WebKit.DOMNode reference_node { get; }
		public WebKit.DOMNode root { get; }
		public ulong what_to_show { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMNodeList : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMNodeList ();
		public ulong get_length ();
		public unowned WebKit.DOMNode item (ulong index);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMObject : GLib.Object {
		public void* coreObject;
		[CCode (has_construct_function = false)]
		protected DOMObject ();
		public void* core_object { construct; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMProcessingInstruction : WebKit.DOMNode, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMProcessingInstruction ();
		public unowned string get_data ();
		public unowned WebKit.DOMStyleSheet get_sheet ();
		public unowned string get_target ();
		public void set_data (string value) throws GLib.Error;
		public string data { get; set; }
		public WebKit.DOMStyleSheet sheet { get; }
		public string target { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMRange : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMRange ();
		public unowned WebKit.DOMDocumentFragment clone_contents () throws GLib.Error;
		public unowned WebKit.DOMRange clone_range () throws GLib.Error;
		public void collapse (bool to_start) throws GLib.Error;
		public short compare_boundary_points (ushort how, WebKit.DOMRange source_range) throws GLib.Error;
		public short compare_node (WebKit.DOMNode ref_node) throws GLib.Error;
		public short compare_point (WebKit.DOMNode ref_node, long offset) throws GLib.Error;
		public unowned WebKit.DOMDocumentFragment create_contextual_fragment (string html) throws GLib.Error;
		public void delete_contents () throws GLib.Error;
		public void detach () throws GLib.Error;
		public void expand (string unit) throws GLib.Error;
		public unowned WebKit.DOMDocumentFragment extract_contents () throws GLib.Error;
		public bool get_collapsed () throws GLib.Error;
		public unowned WebKit.DOMNode get_common_ancestor_container () throws GLib.Error;
		public unowned WebKit.DOMNode get_end_container () throws GLib.Error;
		public long get_end_offset () throws GLib.Error;
		public unowned WebKit.DOMNode get_start_container () throws GLib.Error;
		public long get_start_offset () throws GLib.Error;
		public unowned string get_text ();
		public void insert_node (WebKit.DOMNode new_node) throws GLib.Error;
		public bool intersects_node (WebKit.DOMNode ref_node) throws GLib.Error;
		public bool is_point_in_range (WebKit.DOMNode ref_node, long offset) throws GLib.Error;
		public void select_node (WebKit.DOMNode ref_node) throws GLib.Error;
		public void select_node_contents (WebKit.DOMNode ref_node) throws GLib.Error;
		public void set_end (WebKit.DOMNode ref_node, long offset) throws GLib.Error;
		public void set_end_after (WebKit.DOMNode ref_node) throws GLib.Error;
		public void set_end_before (WebKit.DOMNode ref_node) throws GLib.Error;
		public void set_start (WebKit.DOMNode ref_node, long offset) throws GLib.Error;
		public void set_start_after (WebKit.DOMNode ref_node) throws GLib.Error;
		public void set_start_before (WebKit.DOMNode ref_node) throws GLib.Error;
		public void surround_contents (WebKit.DOMNode new_parent) throws GLib.Error;
		public unowned string to_string () throws GLib.Error;
		public bool collapsed { get; }
		public WebKit.DOMNode common_ancestor_container { get; }
		public WebKit.DOMNode end_container { get; }
		public long end_offset { get; }
		public WebKit.DOMNode start_container { get; }
		public long start_offset { get; }
		public string text { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMScreen : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMScreen ();
		public ulong get_avail_height ();
		public long get_avail_left ();
		public long get_avail_top ();
		public ulong get_avail_width ();
		public ulong get_color_depth ();
		public ulong get_height ();
		public ulong get_pixel_depth ();
		public ulong get_width ();
		public ulong avail_height { get; }
		public long avail_left { get; }
		public long avail_top { get; }
		public ulong avail_width { get; }
		public ulong color_depth { get; }
		public ulong height { get; }
		public ulong pixel_depth { get; }
		public ulong width { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMStorage : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMStorage ();
		public void clear ();
		public unowned string get_item (string key);
		public ulong get_length ();
		public unowned string key (ulong index);
		public void remove_item (string key);
		public void set_item (string key, string data) throws GLib.Error;
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMStyleMedia : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMStyleMedia ();
		public bool match_medium (string mediaquery);
		[NoAccessorMethod]
		public string type { owned get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMStyleSheet : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMStyleSheet ();
		public bool get_disabled ();
		public unowned string get_href ();
		public unowned WebKit.DOMMediaList get_media ();
		public unowned WebKit.DOMNode get_owner_node ();
		public unowned WebKit.DOMStyleSheet get_parent_style_sheet ();
		public unowned string get_title ();
		public void set_disabled (bool value);
		public bool disabled { get; set; }
		public string href { get; }
		public WebKit.DOMMediaList media { get; }
		public WebKit.DOMNode owner_node { get; }
		public WebKit.DOMStyleSheet parent_style_sheet { get; }
		public string title { get; }
		[NoAccessorMethod]
		public string type { owned get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMStyleSheetList : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMStyleSheetList ();
		public ulong get_length ();
		public unowned WebKit.DOMStyleSheet item (ulong index);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMText : WebKit.DOMCharacterData, WebKit.DOMEventTarget {
		[CCode (has_construct_function = false)]
		protected DOMText ();
		public unowned string get_whole_text ();
		public unowned WebKit.DOMText replace_whole_text (string content) throws GLib.Error;
		public unowned WebKit.DOMText split_text (ulong offset) throws GLib.Error;
		public string whole_text { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMTimeRanges : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMTimeRanges ();
		public float end (ulong index) throws GLib.Error;
		public ulong get_length ();
		public float start (ulong index) throws GLib.Error;
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMTreeWalker : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMTreeWalker ();
		public unowned WebKit.DOMNode first_child ();
		public unowned WebKit.DOMNode get_current_node ();
		public bool get_expand_entity_references ();
		public unowned WebKit.DOMNodeFilter get_filter ();
		public unowned WebKit.DOMNode get_root ();
		public ulong get_what_to_show ();
		public unowned WebKit.DOMNode last_child ();
		public unowned WebKit.DOMNode next_node ();
		public unowned WebKit.DOMNode next_sibling ();
		public unowned WebKit.DOMNode parent_node ();
		public unowned WebKit.DOMNode previous_node ();
		public unowned WebKit.DOMNode previous_sibling ();
		public void set_current_node (WebKit.DOMNode value) throws GLib.Error;
		public WebKit.DOMNode current_node { get; set; }
		public bool expand_entity_references { get; }
		public WebKit.DOMNodeFilter filter { get; }
		public WebKit.DOMNode root { get; }
		public ulong what_to_show { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMUIEvent : WebKit.DOMEvent {
		[CCode (has_construct_function = false)]
		protected DOMUIEvent ();
		[CCode (cname = "webkit_dom_ui_event_get_char_code")]
		public long get_char_code ();
		[CCode (cname = "webkit_dom_ui_event_get_detail")]
		public long get_detail ();
		[CCode (cname = "webkit_dom_ui_event_get_key_code")]
		public long get_key_code ();
		[CCode (cname = "webkit_dom_ui_event_get_layer_x")]
		public long get_layer_x ();
		[CCode (cname = "webkit_dom_ui_event_get_layer_y")]
		public long get_layer_y ();
		[CCode (cname = "webkit_dom_ui_event_get_page_x")]
		public long get_page_x ();
		[CCode (cname = "webkit_dom_ui_event_get_page_y")]
		public long get_page_y ();
		[CCode (cname = "webkit_dom_ui_event_get_view")]
		public unowned WebKit.DOMDOMWindow get_view ();
		[CCode (cname = "webkit_dom_ui_event_get_which")]
		public long get_which ();
		[CCode (cname = "webkit_dom_ui_event_init_ui_event")]
		public void init_ui_event (string type, bool can_bubble, bool cancelable, WebKit.DOMDOMWindow view, long detail);
		public long char_code { get; }
		public long detail { get; }
		public long key_code { get; }
		public long layer_x { get; }
		public long layer_y { get; }
		public long page_x { get; }
		public long page_y { get; }
		public WebKit.DOMDOMWindow view { get; }
		public long which { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMValidityState : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMValidityState ();
		public bool get_custom_error ();
		public bool get_pattern_mismatch ();
		public bool get_range_overflow ();
		public bool get_range_underflow ();
		public bool get_step_mismatch ();
		public bool get_too_long ();
		public bool get_type_mismatch ();
		public bool get_valid ();
		public bool get_value_missing ();
		public bool custom_error { get; }
		public bool pattern_mismatch { get; }
		public bool range_overflow { get; }
		public bool range_underflow { get; }
		public bool step_mismatch { get; }
		public bool too_long { get; }
		public bool type_mismatch { get; }
		public bool valid { get; }
		public bool value_missing { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMWebKitAnimation : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMWebKitAnimation ();
		[CCode (cname = "webkit_dom_webkit_animation_get_delay")]
		public double get_delay ();
		[CCode (cname = "webkit_dom_webkit_animation_get_direction")]
		public ushort get_direction ();
		[CCode (cname = "webkit_dom_webkit_animation_get_duration")]
		public double get_duration ();
		[CCode (cname = "webkit_dom_webkit_animation_get_elapsed_time")]
		public double get_elapsed_time ();
		[CCode (cname = "webkit_dom_webkit_animation_get_ended")]
		public bool get_ended ();
		[CCode (cname = "webkit_dom_webkit_animation_get_fill_mode")]
		public ushort get_fill_mode ();
		[CCode (cname = "webkit_dom_webkit_animation_get_name")]
		public unowned string get_name ();
		[CCode (cname = "webkit_dom_webkit_animation_get_paused")]
		public bool get_paused ();
		[CCode (cname = "webkit_dom_webkit_animation_pause")]
		public void pause ();
		[CCode (cname = "webkit_dom_webkit_animation_play")]
		public void play ();
		[CCode (cname = "webkit_dom_webkit_animation_set_elapsed_time")]
		public void set_elapsed_time (double value);
		public double delay { get; }
		public uint direction { get; }
		public double duration { get; }
		public double elapsed_time { get; set; }
		public bool ended { get; }
		public uint fill_mode { get; }
		[NoAccessorMethod]
		public int iteration_count { get; }
		public string name { get; }
		public bool paused { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMWebKitAnimationList : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMWebKitAnimationList ();
		[CCode (cname = "webkit_dom_webkit_animation_list_get_length")]
		public ulong get_length ();
		[CCode (cname = "webkit_dom_webkit_animation_list_item")]
		public unowned WebKit.DOMWebKitAnimation item (ulong index);
		public ulong length { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMWebKitPoint : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMWebKitPoint ();
		[CCode (cname = "webkit_dom_webkit_point_get_x")]
		public float get_x ();
		[CCode (cname = "webkit_dom_webkit_point_get_y")]
		public float get_y ();
		[CCode (cname = "webkit_dom_webkit_point_set_x")]
		public void set_x (float value);
		[CCode (cname = "webkit_dom_webkit_point_set_y")]
		public void set_y (float value);
		public float x { get; set; }
		public float y { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMXPathExpression : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMXPathExpression ();
		[CCode (cname = "webkit_dom_xpath_expression_evaluate")]
		public unowned WebKit.DOMXPathResult evaluate (WebKit.DOMNode context_node, ushort type, WebKit.DOMXPathResult in_result) throws GLib.Error;
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMXPathNSResolver : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMXPathNSResolver ();
		[CCode (cname = "webkit_dom_xpath_ns_resolver_lookup_namespace_uri")]
		public unowned string lookup_namespace_uri (string prefix);
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class DOMXPathResult : WebKit.DOMObject {
		[CCode (has_construct_function = false)]
		protected DOMXPathResult ();
		[CCode (cname = "webkit_dom_xpath_result_get_boolean_value")]
		public bool get_boolean_value () throws GLib.Error;
		[CCode (cname = "webkit_dom_xpath_result_get_invalid_iterator_state")]
		public bool get_invalid_iterator_state ();
		[CCode (cname = "webkit_dom_xpath_result_get_number_value")]
		public double get_number_value () throws GLib.Error;
		[CCode (cname = "webkit_dom_xpath_result_get_result_type")]
		public ushort get_result_type ();
		[CCode (cname = "webkit_dom_xpath_result_get_single_node_value")]
		public unowned WebKit.DOMNode get_single_node_value () throws GLib.Error;
		[CCode (cname = "webkit_dom_xpath_result_get_snapshot_length")]
		public ulong get_snapshot_length () throws GLib.Error;
		[CCode (cname = "webkit_dom_xpath_result_get_string_value")]
		public unowned string get_string_value () throws GLib.Error;
		[CCode (cname = "webkit_dom_xpath_result_iterate_next")]
		public unowned WebKit.DOMNode iterate_next () throws GLib.Error;
		[CCode (cname = "webkit_dom_xpath_result_snapshot_item")]
		public unowned WebKit.DOMNode snapshot_item (ulong index) throws GLib.Error;
		public bool boolean_value { get; }
		public bool invalid_iterator_state { get; }
		public double number_value { get; }
		public uint result_type { get; }
		public WebKit.DOMNode single_node_value { get; }
		public ulong snapshot_length { get; }
		public string string_value { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class Download : GLib.Object {
		[CCode (has_construct_function = false)]
		public Download (WebKit.NetworkRequest request);
		public void cancel ();
		public uint64 get_current_size ();
		public unowned string get_destination_uri ();
		public double get_elapsed_time ();
		public unowned WebKit.NetworkRequest get_network_request ();
		public unowned WebKit.NetworkResponse get_network_response ();
		public double get_progress ();
		public WebKit.DownloadStatus get_status ();
		public unowned string get_suggested_filename ();
		public uint64 get_total_size ();
		public unowned string get_uri ();
		public void set_destination_uri (string destination_uri);
		public void start ();
		public uint64 current_size { get; }
		public string destination_uri { get; set; }
		public WebKit.NetworkRequest network_request { get; construct; }
		public WebKit.NetworkResponse network_response { get; construct; }
		public double progress { get; }
		public WebKit.DownloadStatus status { get; }
		public string suggested_filename { get; }
		public uint64 total_size { get; }
		public virtual signal bool error (int p0, int p1, string p2);
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class GeolocationPolicyDecision : GLib.Object {
		[CCode (has_construct_function = false)]
		protected GeolocationPolicyDecision ();
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class HitTestResult : GLib.Object {
		[CCode (has_construct_function = false)]
		protected HitTestResult ();
		[NoAccessorMethod]
		public WebKit.HitTestResultContext context { get; construct; }
		[NoAccessorMethod]
		public string image_uri { owned get; construct; }
		[NoAccessorMethod]
		public WebKit.DOMNode inner_node { owned get; construct; }
		[NoAccessorMethod]
		public string link_uri { owned get; construct; }
		[NoAccessorMethod]
		public string media_uri { owned get; construct; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class IconDatabase : GLib.Object {
		[CCode (has_construct_function = false)]
		protected IconDatabase ();
		public void clear ();
		public unowned Gdk.Pixbuf get_icon_pixbuf (string page_uri);
		public unowned string get_icon_uri (string page_uri);
		public unowned string get_path ();
		public void set_path (string path);
		public string path { get; set; }
		public virtual signal void icon_loaded (WebKit.WebFrame p0, string p1);
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class NetworkRequest : GLib.Object {
		[CCode (has_construct_function = false)]
		public NetworkRequest (string uri);
		public unowned Soup.Message get_message ();
		public unowned string get_uri ();
		public void set_uri (string uri);
		public Soup.Message message { get; construct; }
		public string uri { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class NetworkResponse : GLib.Object {
		[CCode (has_construct_function = false)]
		public NetworkResponse (string uri);
		public unowned Soup.Message get_message ();
		public unowned string get_uri ();
		public void set_uri (string uri);
		public Soup.Message message { get; construct; }
		public string uri { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class SecurityOrigin : GLib.Object {
		[CCode (has_construct_function = false)]
		protected SecurityOrigin ();
		public unowned GLib.List<WebKit.WebDatabase> get_all_web_databases ();
		public unowned string get_host ();
		public uint get_port ();
		public unowned string get_protocol ();
		public uint64 get_web_database_quota ();
		public uint64 get_web_database_usage ();
		public void set_web_database_quota (uint64 quota);
		public string host { get; }
		public uint port { get; }
		public string protocol { get; }
		public uint64 web_database_quota { get; set; }
		public uint64 web_database_usage { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class SoupAuthDialog : GLib.Object, Soup.SessionFeature {
		[CCode (has_construct_function = false)]
		protected SoupAuthDialog ();
		public virtual signal unowned Gtk.Widget current_toplevel (Soup.Message message);
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class ViewportAttributes : GLib.Object {
		[CCode (has_construct_function = false)]
		protected ViewportAttributes ();
		public void recompute ();
		[NoAccessorMethod]
		public int available_height { get; set; }
		[NoAccessorMethod]
		public int available_width { get; set; }
		[NoAccessorMethod]
		public int desktop_width { get; set; }
		[NoAccessorMethod]
		public int device_dpi { get; set; }
		[NoAccessorMethod]
		public int device_height { get; set; }
		[NoAccessorMethod]
		public float device_pixel_ratio { get; }
		[NoAccessorMethod]
		public int device_width { get; set; }
		[NoAccessorMethod]
		public int height { get; }
		[NoAccessorMethod]
		public float initial_scale_factor { get; }
		[NoAccessorMethod]
		public float maximum_scale_factor { get; }
		[NoAccessorMethod]
		public float minimum_scale_factor { get; }
		[NoAccessorMethod]
		public bool user_scalable { get; }
		[NoAccessorMethod]
		public bool valid { get; }
		[NoAccessorMethod]
		public int width { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class WebBackForwardList : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WebBackForwardList ();
		public void add_item (WebKit.WebHistoryItem history_item);
		public void clear ();
		public bool contains_item (WebKit.WebHistoryItem history_item);
		public unowned WebKit.WebHistoryItem get_back_item ();
		public int get_back_length ();
		public unowned GLib.List<WebKit.WebHistoryItem> get_back_list_with_limit (int limit);
		public unowned WebKit.WebHistoryItem get_current_item ();
		public unowned WebKit.WebHistoryItem get_forward_item ();
		public int get_forward_length ();
		public unowned GLib.List<WebKit.WebHistoryItem> get_forward_list_with_limit (int limit);
		public int get_limit ();
		public unowned WebKit.WebHistoryItem get_nth_item (int index);
		public void go_back ();
		public void go_forward ();
		public void go_to_item (WebKit.WebHistoryItem history_item);
		public void set_limit (int limit);
		[CCode (has_construct_function = false)]
		public WebBackForwardList.with_web_view (WebKit.WebView web_view);
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class WebDataSource : GLib.Object {
		[CCode (has_construct_function = false)]
		public WebDataSource ();
		public unowned GLib.StringBuilder get_data ();
		public unowned string get_encoding ();
		public unowned WebKit.NetworkRequest get_initial_request ();
		public unowned WebKit.WebResource get_main_resource ();
		public unowned WebKit.NetworkRequest get_request ();
		public unowned GLib.List<WebKit.WebResource> get_subresources ();
		public unowned string get_unreachable_uri ();
		public unowned WebKit.WebFrame get_web_frame ();
		public bool is_loading ();
		[CCode (has_construct_function = false)]
		public WebDataSource.with_request (WebKit.NetworkRequest request);
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class WebDatabase : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WebDatabase ();
		public unowned string get_display_name ();
		public uint64 get_expected_size ();
		public unowned string get_filename ();
		public unowned string get_name ();
		public unowned WebKit.SecurityOrigin get_security_origin ();
		public uint64 get_size ();
		public void remove ();
		public string display_name { get; }
		public uint64 expected_size { get; }
		public string filename { get; }
		public string name { get; construct; }
		public WebKit.SecurityOrigin security_origin { get; construct; }
		public uint64 size { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class WebFrame : GLib.Object {
		[CCode (has_construct_function = false)]
		public WebFrame (WebKit.WebView web_view);
		public unowned WebKit.WebFrame find_frame (string name);
        public unowned JSCore.Context get_global_context ();
		public unowned WebKit.WebDataSource get_data_source ();
		public Gtk.PolicyType get_horizontal_scrollbar_policy ();
		public WebKit.LoadStatus get_load_status ();
		public unowned string get_name ();
		public unowned WebKit.NetworkResponse get_network_response ();
		public unowned WebKit.WebFrame get_parent ();
		public unowned WebKit.WebDataSource get_provisional_data_source ();
		public unowned WebKit.DOMRange get_range_for_word_around_caret ();
		public unowned WebKit.SecurityOrigin get_security_origin ();
		public unowned string get_title ();
		public unowned string get_uri ();
		public Gtk.PolicyType get_vertical_scrollbar_policy ();
		public unowned WebKit.WebView get_web_view ();
		public void load_alternate_string (string content, string base_url, string unreachable_url);
		public void load_request (WebKit.NetworkRequest request);
		public void load_string (string content, string mime_type, string encoding, string base_uri);
		public void load_uri (string uri);
		public void print ();
		public Gtk.PrintOperationResult print_full (Gtk.PrintOperation operation, Gtk.PrintOperationAction action) throws GLib.Error;
		public void reload ();
		public void replace_selection (string text);
		public void stop_loading ();
		public Gtk.PolicyType horizontal_scrollbar_policy { get; }
		public WebKit.LoadStatus load_status { get; }
		public string name { get; }
		public string title { get; }
		public string uri { get; }
		public Gtk.PolicyType vertical_scrollbar_policy { get; }
		public virtual signal void cleared ();
		public virtual signal void hovering_over_link (string p0, string p1);
		public virtual signal void load_committed ();
		public virtual signal void load_done (bool p0);
		public virtual signal bool scrollbars_policy_changed ();
		public virtual signal void title_changed (string p0);
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class WebHistoryItem : GLib.Object {
		[CCode (has_construct_function = false)]
		public WebHistoryItem ();
		public unowned WebKit.WebHistoryItem copy ();
		public unowned string get_alternate_title ();
		public double get_last_visited_time ();
		public unowned string get_original_uri ();
		public unowned string get_title ();
		public unowned string get_uri ();
		public void set_alternate_title (string title);
		[CCode (has_construct_function = false)]
		public WebHistoryItem.with_data (string uri, string title);
		public string alternate_title { get; set; }
		public double last_visited_time { get; }
		public string original_uri { get; }
		public string title { get; }
		public string uri { get; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class WebInspector : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WebInspector ();
		public void close ();
		public unowned string get_inspected_uri ();
		public unowned WebKit.WebView get_web_view ();
		public void inspect_coordinates (double x, double y);
		public void inspect_node (WebKit.DOMNode node);
		public void show ();
		public string inspected_uri { get; }
		[NoAccessorMethod]
		public bool javascript_profiling_enabled { get; set; }
		[NoAccessorMethod]
		public bool timeline_profiling_enabled { get; set; }
		public WebKit.WebView web_view { get; }
		public virtual signal bool attach_window ();
		public virtual signal bool close_window ();
		public virtual signal bool detach_window ();
		public virtual signal void finished ();
		public virtual signal unowned WebKit.WebView inspect_web_view (WebKit.WebView p0);
		public virtual signal bool show_window ();
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class WebNavigationAction : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WebNavigationAction ();
		public int get_button ();
		public int get_modifier_state ();
		public unowned string get_original_uri ();
		public WebKit.WebNavigationReason get_reason ();
		public unowned string get_target_frame ();
		public void set_original_uri (string originalUri);
		public void set_reason (WebKit.WebNavigationReason reason);
		public int button { get; construct; }
		public int modifier_state { get; construct; }
		public string original_uri { get; set construct; }
		public WebKit.WebNavigationReason reason { get; set construct; }
		public string target_frame { get; construct; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class WebPlugin : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WebPlugin ();
		public unowned string get_description ();
		public bool get_enabled ();
		public unowned GLib.SList get_mimetypes ();
		public unowned string get_name ();
		public unowned string get_path ();
		public void set_enabled (bool p2);
		public bool enabled { get; set; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class WebPluginDatabase : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WebPluginDatabase ();
		public unowned WebKit.WebPlugin get_plugin_for_mimetype (string p2);
		public unowned GLib.SList get_plugins ();
		public static void plugins_list_free (GLib.SList p1);
		public void refresh ();
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	[Compact]
	public class WebPluginMIMEType {
		public weak string description;
		public weak string extensions;
		public weak string name;
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class WebPolicyDecision : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WebPolicyDecision ();
		public void download ();
		public void ignore ();
		public void use ();
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class WebResource : GLib.Object {
		[CCode (has_construct_function = false)]
		public WebResource (string data, ssize_t size, string uri, string mime_type, string encoding, string frame_name);
		public unowned GLib.StringBuilder get_data ();
		public unowned string get_encoding ();
		public unowned string get_frame_name ();
		public unowned string get_mime_type ();
		public unowned string get_uri ();
		public string encoding { get; }
		public string frame_name { get; }
		public string mime_type { get; }
		public string uri { get; construct; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class WebSettings : GLib.Object {
		[CCode (has_construct_function = false)]
		public WebSettings ();
		public WebKit.WebSettings copy ();
		public unowned string get_user_agent ();
		[NoAccessorMethod]
		public bool auto_load_images { get; set construct; }
		[NoAccessorMethod]
		public bool auto_resize_window { get; set construct; }
		[NoAccessorMethod]
		public bool auto_shrink_images { get; set construct; }
		[NoAccessorMethod]
		public string cursive_font_family { owned get; set construct; }
		[NoAccessorMethod]
		public string default_encoding { owned get; set construct; }
		[NoAccessorMethod]
		public string default_font_family { owned get; set construct; }
		[NoAccessorMethod]
		public int default_font_size { get; set construct; }
		[NoAccessorMethod]
		public int default_monospace_font_size { get; set construct; }
		[NoAccessorMethod]
		public WebKit.EditingBehavior editing_behavior { get; set construct; }
		[NoAccessorMethod]
		public bool enable_caret_browsing { get; set construct; }
		[NoAccessorMethod]
		public bool enable_default_context_menu { get; set construct; }
		[NoAccessorMethod]
		public bool enable_developer_extras { get; set construct; }
		[NoAccessorMethod]
		public bool enable_dns_prefetching { get; set construct; }
		[NoAccessorMethod]
		public bool enable_dom_paste { get; set construct; }
		[NoAccessorMethod]
		public bool enable_file_access_from_file_uris { get; set construct; }
		[NoAccessorMethod]
		public bool enable_frame_flattening { get; set construct; }
		[NoAccessorMethod]
		public bool enable_fullscreen { get; set construct; }
		[NoAccessorMethod]
		public bool enable_html5_database { get; set construct; }
		[NoAccessorMethod]
		public bool enable_html5_local_storage { get; set construct; }
		[NoAccessorMethod]
		public bool enable_hyperlink_auditing { get; set construct; }
		[NoAccessorMethod]
		public bool enable_java_applet { get; set construct; }
		[NoAccessorMethod]
		public bool enable_offline_web_application_cache { get; set construct; }
		[NoAccessorMethod]
		public bool enable_page_cache { get; set construct; }
		[NoAccessorMethod]
		public bool enable_plugins { get; set construct; }
		[NoAccessorMethod]
		public bool enable_private_browsing { get; set construct; }
		[NoAccessorMethod]
		public bool enable_scripts { get; set construct; }
		[NoAccessorMethod]
		public bool enable_site_specific_quirks { get; set construct; }
		[NoAccessorMethod]
		public bool enable_spatial_navigation { get; set construct; }
		[NoAccessorMethod]
		public bool enable_spell_checking { get; set construct; }
		[NoAccessorMethod]
		public bool enable_universal_access_from_file_uris { get; set construct; }
		[NoAccessorMethod]
		public bool enable_webgl { get; set construct; }
		[NoAccessorMethod]
		public bool enable_xss_auditor { get; set construct; }
		[NoAccessorMethod]
		public bool enforce_96_dpi { get; set construct; }
		[NoAccessorMethod]
		public string fantasy_font_family { owned get; set construct; }
		[NoAccessorMethod]
		public string html5_local_storage_database_path { owned get; set construct; }
		[NoAccessorMethod]
		public bool javascript_can_access_clipboard { get; set construct; }
		[NoAccessorMethod]
		public bool javascript_can_open_windows_automatically { get; set construct; }
		[NoAccessorMethod]
		public int minimum_font_size { get; set construct; }
		[NoAccessorMethod]
		public int minimum_logical_font_size { get; set construct; }
		[NoAccessorMethod]
		public string monospace_font_family { owned get; set construct; }
		[NoAccessorMethod]
		public bool print_backgrounds { get; set construct; }
		[NoAccessorMethod]
		public bool resizable_text_areas { get; set construct; }
		[NoAccessorMethod]
		public string sans_serif_font_family { owned get; set construct; }
		[NoAccessorMethod]
		public string serif_font_family { owned get; set construct; }
		[NoAccessorMethod]
		public string spell_checking_languages { owned get; set construct; }
		[NoAccessorMethod]
		public bool tab_key_cycles_through_elements { get; set construct; }
		[NoAccessorMethod]
		public string user_agent { owned get; set construct; }
		[NoAccessorMethod]
		public string user_stylesheet_uri { owned get; set construct; }
		[NoAccessorMethod]
		public float zoom_step { get; set construct; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class WebView : Gtk.Container, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public WebView ();
		public bool can_copy_clipboard ();
		public bool can_cut_clipboard ();
		public bool can_go_back ();
		public bool can_go_back_or_forward (int steps);
		public bool can_go_forward ();
		public bool can_paste_clipboard ();
		public bool can_redo ();
		public bool can_show_mime_type (string mime_type);
		public bool can_undo ();
		[NoWrapper]
		public virtual unowned string choose_file (WebKit.WebFrame frame, string old_file);
		public void delete_selection ();
		public void execute_script (string script);
		public unowned WebKit.WebBackForwardList get_back_forward_list ();
		public unowned Gtk.TargetList get_copy_target_list ();
		public unowned string get_custom_encoding ();
		public unowned WebKit.DOMDocument get_dom_document ();
		public bool get_editable ();
		public unowned string get_encoding ();
		public unowned WebKit.WebFrame get_focused_frame ();
		public bool get_full_content_zoom ();
		public unowned WebKit.HitTestResult get_hit_test_result (Gdk.EventButton event);
		public unowned Gdk.Pixbuf get_icon_pixbuf ();
		public unowned string get_icon_uri ();
		public unowned WebKit.WebInspector get_inspector ();
		public WebKit.LoadStatus get_load_status ();
		public unowned WebKit.WebFrame get_main_frame ();
		public unowned Gtk.TargetList get_paste_target_list ();
		public double get_progress ();
		public unowned WebKit.WebSettings get_settings ();
		public unowned string get_title ();
		public bool get_transparent ();
		public unowned string get_uri ();
		public WebKit.WebViewViewMode get_view_mode ();
		public bool get_view_source_mode ();
		public unowned WebKit.ViewportAttributes get_viewport_attributes ();
		public unowned WebKit.WebWindowFeatures get_window_features ();
		public float get_zoom_level ();
		public void go_back ();
		public void go_back_or_forward (int steps);
		public void go_forward ();
		public bool go_to_back_forward_item (WebKit.WebHistoryItem item);
		public bool has_selection ();
		public void load_html_string (string content, string base_uri);
		public void load_request (WebKit.NetworkRequest request);
		public void load_string (string content, string mime_type, string encoding, string base_uri);
		public void load_uri (string uri);
		public uint mark_text_matches (string str, bool case_sensitive, uint limit);
		public void open (string uri);
		public void reload ();
		public void reload_bypass_cache ();
		public bool search_text (string text, bool case_sensitive, bool forward, bool wrap);
		public void set_custom_encoding (string encoding);
		public void set_editable (bool flag);
		public void set_full_content_zoom (bool full_content_zoom);
		public void set_highlight_text_matches (bool highlight);
		public void set_maintains_back_forward_list (bool flag);
		public void set_settings (WebKit.WebSettings settings);
		public void set_transparent (bool flag);
		public void set_view_mode (WebKit.WebViewViewMode mode);
		public void set_view_source_mode (bool view_source_mode);
		public void set_zoom_level (float zoom_level);
		[NoWrapper]
		public virtual bool should_allow_editing_action ();
		public void stop_loading ();
		public void unmark_text_matches ();
		public void zoom_in ();
		public void zoom_out ();
		public Gtk.TargetList copy_target_list { get; }
		public string custom_encoding { get; set; }
		public bool editable { get; set; }
		public string encoding { get; }
		public bool full_content_zoom { get; set; }
		public string icon_uri { get; }
		[NoAccessorMethod]
		public Gtk.IMContext im_context { owned get; }
		public WebKit.LoadStatus load_status { get; }
		public Gtk.TargetList paste_target_list { get; }
		public double progress { get; }
		[NoAccessorMethod]
		public bool self_scrolling { get; construct; }
		public WebKit.WebSettings settings { get; set; }
		public string title { get; }
		public bool transparent { get; set; }
		public string uri { get; }
		public WebKit.WebViewViewMode view_mode { get; set; }
		public WebKit.ViewportAttributes viewport_attributes { get; }
		[NoAccessorMethod]
		public WebKit.WebInspector web_inspector { owned get; }
		[NoAccessorMethod]
		public WebKit.WebWindowFeatures window_features { owned get; set; }
		public float zoom_level { get; set; }
		public virtual signal bool close_web_view ();
		public virtual signal bool console_message (string message, int line_number, string source_id);
		[HasEmitter]
		public virtual signal void copy_clipboard ();
		public virtual signal unowned Gtk.Widget create_plugin_widget (string p0, string p1, GLib.HashTable p2);
		public virtual signal WebKit.WebView create_web_view (WebKit.WebFrame web_frame);
		[HasEmitter]
		public virtual signal void cut_clipboard ();
		public virtual signal void database_quota_exceeded (GLib.Object p0, GLib.Object p1);
		public virtual signal void document_load_finished (WebKit.WebFrame p0);
		public virtual signal bool download_requested (GLib.Object p0);
		public virtual signal void editing_began ();
		public virtual signal void editing_ended ();
		public virtual signal void frame_created (WebKit.WebFrame p0);
		public virtual signal void geolocation_policy_decision_cancelled (WebKit.WebFrame p0);
		public virtual signal bool geolocation_policy_decision_requested (WebKit.WebFrame p0, WebKit.GeolocationPolicyDecision p1);
		public virtual signal void hovering_over_link (string? p0, string? p1);
		public virtual signal void icon_loaded (string p0);
		public virtual signal void load_committed (WebKit.WebFrame p0);
		public virtual signal bool load_error (WebKit.WebFrame p0, string p1, GLib.Error p2);
		public virtual signal void load_finished (WebKit.WebFrame p0);
		public virtual signal void load_progress_changed (int p0);
		public virtual signal void load_started (WebKit.WebFrame p0);
		public virtual signal bool mime_type_policy_decision_requested (WebKit.WebFrame p0, WebKit.NetworkRequest p1, string p2, WebKit.WebPolicyDecision p3);
		[HasEmitter]
		public virtual signal bool move_cursor (Gtk.MovementStep step, int count);
		public virtual signal bool navigation_policy_decision_requested (WebKit.WebFrame p0, WebKit.NetworkRequest p1, WebKit.WebNavigationAction p2, WebKit.WebPolicyDecision p3);
		public virtual signal WebKit.NavigationResponse navigation_requested (WebKit.WebFrame frame, WebKit.NetworkRequest request);
		public virtual signal bool new_window_policy_decision_requested (WebKit.WebFrame p0, WebKit.NetworkRequest p1, WebKit.WebNavigationAction p2, WebKit.WebPolicyDecision p3);
		public virtual signal void onload_event (WebKit.WebFrame p0);
		[HasEmitter]
		public virtual signal void paste_clipboard ();
		public virtual signal void populate_popup (Gtk.Menu p0);
		public virtual signal bool print_requested (WebKit.WebFrame p0);
		[HasEmitter]
		public virtual signal void redo ();
		public virtual signal void resource_request_starting (WebKit.WebFrame p0, WebKit.WebResource p1, WebKit.NetworkRequest p2, WebKit.NetworkResponse? p3);
		public virtual signal bool script_alert (WebKit.WebFrame frame, string alert_message);
		public virtual signal bool script_confirm (WebKit.WebFrame frame, string confirm_message, void* did_confirm);
		public virtual signal bool script_prompt (WebKit.WebFrame frame, string message, string default_value, void* value);
		[HasEmitter]
		public virtual signal void select_all ();
		public virtual signal void selection_changed ();
		public virtual signal void set_scroll_adjustments (Gtk.Adjustment hadjustment, Gtk.Adjustment vadjustment);
		public virtual signal bool should_apply_style (WebKit.DOMCSSStyleDeclaration p0, WebKit.DOMRange p1);
		public virtual signal bool should_begin_editing (WebKit.DOMRange p0);
		public virtual signal bool should_change_selected_range (WebKit.DOMRange p0, WebKit.DOMRange p1, WebKit.SelectionAffinity p2, bool p3);
		public virtual signal bool should_delete_range (WebKit.DOMRange p0);
		public virtual signal bool should_end_editing (WebKit.DOMRange p0);
		public virtual signal bool should_insert_node (WebKit.DOMNode p0, WebKit.DOMRange p1, WebKit.InsertAction p2);
		public virtual signal bool should_insert_text (string p0, WebKit.DOMRange p1, WebKit.InsertAction p2);
		public virtual signal bool should_show_delete_interface_for_element (WebKit.DOMHTMLElement p0);
		public virtual signal void status_bar_text_changed (string p0);
		public virtual signal void title_changed (WebKit.WebFrame p0, string p1);
		[HasEmitter]
		public virtual signal void undo ();
		public virtual signal void user_changed_contents ();
		public virtual signal void viewport_attributes_changed (WebKit.ViewportAttributes p0);
		public virtual signal void viewport_attributes_recompute_requested (WebKit.ViewportAttributes p0);
		public virtual signal bool web_view_ready ();
		public virtual signal void window_object_cleared (WebKit.WebFrame frame, void* context, void* window_object);
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public class WebWindowFeatures : GLib.Object {
		[CCode (has_construct_function = false)]
		public WebWindowFeatures ();
		public bool equal (WebKit.WebWindowFeatures features2);
		[NoAccessorMethod]
		public bool fullscreen { get; set construct; }
		[NoAccessorMethod]
		public int height { get; set construct; }
		[NoAccessorMethod]
		public bool locationbar_visible { get; set construct; }
		[NoAccessorMethod]
		public bool menubar_visible { get; set construct; }
		[NoAccessorMethod]
		public bool scrollbar_visible { get; set construct; }
		[NoAccessorMethod]
		public bool statusbar_visible { get; set construct; }
		[NoAccessorMethod]
		public bool toolbar_visible { get; set construct; }
		[NoAccessorMethod]
		public int width { get; set construct; }
		[NoAccessorMethod]
		public int x { get; set construct; }
		[NoAccessorMethod]
		public int y { get; set construct; }
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public interface DOMEventTarget : GLib.Object {
		public abstract bool add_event_listener (string eventName, GLib.Callback handler, bool bubble, void* userData);
		public abstract void dispatch_event (WebKit.DOMEvent event) throws GLib.Error;
		public abstract bool remove_event_listener (string eventName, GLib.Callback handler, bool bubble);
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public interface SpellChecker : GLib.Object {
		public abstract void check_spelling_of_string (string str, int misspelling_location, int misspelling_length);
		public abstract unowned string get_autocorrect_suggestions_for_misspelled_word (string word);
		public abstract unowned string get_guesses_for_word (string word, string context);
		public abstract void ignore_word (string word);
		public abstract void learn_word (string word);
		public abstract void update_spell_checking_languages (string languages);
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_CACHE_MODEL_")]
	public enum CacheModel {
		DEFAULT,
		DOCUMENT_VIEWER,
		WEB_BROWSER,
		DOCUMENT_BROWSER
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_DOWNLOAD_ERROR_")]
	public enum DownloadError {
		CANCELLED_BY_USER,
		DESTINATION,
		NETWORK
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_DOWNLOAD_STATUS_")]
	public enum DownloadStatus {
		ERROR,
		CREATED,
		STARTED,
		CANCELLED,
		FINISHED
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_EDITING_BEHAVIOR_")]
	public enum EditingBehavior {
		MAC,
		WINDOWS,
		UNIX
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_HIT_TEST_RESULT_CONTEXT_")]
	[Flags]
	public enum HitTestResultContext {
		DOCUMENT,
		LINK,
		IMAGE,
		MEDIA,
		SELECTION,
		EDITABLE
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_INSERT_ACTION_")]
	public enum InsertAction {
		TYPED,
		PASTED,
		DROPPED
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_LOAD_")]
	public enum LoadStatus {
		PROVISIONAL,
		COMMITTED,
		FINISHED,
		FIRST_VISUALLY_NON_EMPTY_LAYOUT,
		FAILED
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_NAVIGATION_RESPONSE_")]
	public enum NavigationResponse {
		ACCEPT,
		IGNORE,
		DOWNLOAD
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_NETWORK_ERROR_")]
	public enum NetworkError {
		FAILED,
		TRANSPORT,
		UNKNOWN_PROTOCOL,
		CANCELLED,
		FILE_DOES_NOT_EXIST
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_PLUGIN_ERROR_")]
	public enum PluginError {
		FAILED,
		CANNOT_FIND_PLUGIN,
		CANNOT_LOAD_PLUGIN,
		JAVA_UNAVAILABLE,
		CONNECTION_CANCELLED,
		WILL_HANDLE_LOAD
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_POLICY_ERROR_")]
	public enum PolicyError {
		FAILED,
		CANNOT_SHOW_MIME_TYPE,
		CANNOT_SHOW_URL,
		FRAME_LOAD_INTERRUPTED_BY_POLICY_CHANGE,
		CANNOT_USE_RESTRICTED_PORT
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_SELECTION_AFFINITY_")]
	public enum SelectionAffinity {
		UPSTREAM,
		DOWNSTREAM
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_WEB_NAVIGATION_REASON_")]
	public enum WebNavigationReason {
		LINK_CLICKED,
		FORM_SUBMITTED,
		BACK_FORWARD,
		RELOAD,
		FORM_RESUBMITTED,
		OTHER
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_WEB_VIEW_TARGET_INFO_")]
	public enum WebViewTargetInfo {
		HTML,
		TEXT,
		IMAGE,
		URI_LIST,
		NETSCAPE_URL
	}
	[CCode (cheader_filename = "webkit/webkit.h", cprefix = "WEBKIT_WEB_VIEW_VIEW_MODE_")]
	public enum WebViewViewMode {
		WINDOWED,
		FLOATING,
		FULLSCREEN,
		MAXIMIZED,
		MINIMIZED
	}
	[CCode (cheader_filename = "webkit/webkit.h")]
	public const int MAJOR_VERSION;
	[CCode (cheader_filename = "webkit/webkit.h")]
	public const int MICRO_VERSION;
	[CCode (cheader_filename = "webkit/webkit.h")]
	public const int MINOR_VERSION;
	[CCode (cheader_filename = "webkit/webkit.h")]
	public const int USER_AGENT_MAJOR_VERSION;
	[CCode (cheader_filename = "webkit/webkit.h")]
	public const int USER_AGENT_MINOR_VERSION;
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static unowned string application_cache_get_database_directory_path ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static uint application_cache_get_maximum_size ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static void application_cache_set_maximum_size (uint size);
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static bool check_version (uint major, uint minor, uint micro);
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static void geolocation_policy_allow (WebKit.GeolocationPolicyDecision decision);
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static void geolocation_policy_deny (WebKit.GeolocationPolicyDecision decision);
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static WebKit.CacheModel get_cache_model ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static unowned Soup.Session get_default_session ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static uint64 get_default_web_database_quota ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static unowned WebKit.IconDatabase get_icon_database ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static unowned GLib.Object get_text_checker ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static unowned string get_web_database_directory_path ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static unowned WebKit.WebPluginDatabase get_web_plugin_database ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static uint major_version ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static uint micro_version ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static uint minor_version ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static GLib.Quark network_error_quark ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static GLib.Quark plugin_error_quark ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static GLib.Quark policy_error_quark ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static void remove_all_web_databases ();
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static void set_cache_model (WebKit.CacheModel cache_model);
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static void set_default_web_database_quota (uint64 defaultQuota);
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static void set_text_checker (GLib.Object checker);
	[CCode (cheader_filename = "webkit/webkit.h")]
	public static void set_web_database_directory_path (string path);
}
